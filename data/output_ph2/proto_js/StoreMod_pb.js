/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var Data_pb = require('./Data_pb.js');
goog.object.extend(proto, Data_pb);
var EventHookPhase_pb = require('./EventHookPhase_pb.js');
goog.object.extend(proto, EventHookPhase_pb);
goog.exportSymbol('proto.ULZProto.ADPhaseSnapMod', null, global);
goog.exportSymbol('proto.ULZProto.EffectNodeSnapMod', null, global);
goog.exportSymbol('proto.ULZProto.MovePhaseSnapMod', null, global);
goog.exportSymbol('proto.ULZProto.PhaseSnapMod', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ULZProto.MovePhaseSnapMod = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ULZProto.MovePhaseSnapMod.repeatedFields_, null);
};
goog.inherits(proto.ULZProto.MovePhaseSnapMod, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ULZProto.MovePhaseSnapMod.displayName = 'proto.ULZProto.MovePhaseSnapMod';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ULZProto.MovePhaseSnapMod.repeatedFields_ = [6,7,8,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ULZProto.MovePhaseSnapMod.prototype.toObject = function(opt_includeInstance) {
  return proto.ULZProto.MovePhaseSnapMod.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ULZProto.MovePhaseSnapMod} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.MovePhaseSnapMod.toObject = function(includeInstance, msg) {
  var f, obj = {
    turns: jspb.Message.getFieldWithDefault(msg, 1, 0),
    hostVal: jspb.Message.getFieldWithDefault(msg, 2, 0),
    duelVal: jspb.Message.getFieldWithDefault(msg, 3, 0),
    hostOpt: jspb.Message.getFieldWithDefault(msg, 4, 0),
    duelOpt: jspb.Message.getFieldWithDefault(msg, 5, 0),
    hostCardList: jspb.Message.toObjectList(msg.getHostCardList(),
    Data_pb.EventCard.toObject, includeInstance),
    duelCardList: jspb.Message.toObjectList(msg.getDuelCardList(),
    Data_pb.EventCard.toObject, includeInstance),
    hostTrigSklList: jspb.Message.toObjectList(msg.getHostTrigSklList(),
    Data_pb.SkillSet.toObject, includeInstance),
    duelTrigSklList: jspb.Message.toObjectList(msg.getDuelTrigSklList(),
    Data_pb.SkillSet.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ULZProto.MovePhaseSnapMod}
 */
proto.ULZProto.MovePhaseSnapMod.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ULZProto.MovePhaseSnapMod;
  return proto.ULZProto.MovePhaseSnapMod.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ULZProto.MovePhaseSnapMod} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ULZProto.MovePhaseSnapMod}
 */
proto.ULZProto.MovePhaseSnapMod.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTurns(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHostVal(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDuelVal(value);
      break;
    case 4:
      var value = /** @type {!proto.ULZProto.MovePhaseOpt} */ (reader.readEnum());
      msg.setHostOpt(value);
      break;
    case 5:
      var value = /** @type {!proto.ULZProto.MovePhaseOpt} */ (reader.readEnum());
      msg.setDuelOpt(value);
      break;
    case 6:
      var value = new Data_pb.EventCard;
      reader.readMessage(value,Data_pb.EventCard.deserializeBinaryFromReader);
      msg.addHostCard(value);
      break;
    case 7:
      var value = new Data_pb.EventCard;
      reader.readMessage(value,Data_pb.EventCard.deserializeBinaryFromReader);
      msg.addDuelCard(value);
      break;
    case 8:
      var value = new Data_pb.SkillSet;
      reader.readMessage(value,Data_pb.SkillSet.deserializeBinaryFromReader);
      msg.addHostTrigSkl(value);
      break;
    case 9:
      var value = new Data_pb.SkillSet;
      reader.readMessage(value,Data_pb.SkillSet.deserializeBinaryFromReader);
      msg.addDuelTrigSkl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ULZProto.MovePhaseSnapMod.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ULZProto.MovePhaseSnapMod.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ULZProto.MovePhaseSnapMod} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.MovePhaseSnapMod.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTurns();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getHostVal();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getDuelVal();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getHostOpt();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getDuelOpt();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getHostCardList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      Data_pb.EventCard.serializeBinaryToWriter
    );
  }
  f = message.getDuelCardList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      Data_pb.EventCard.serializeBinaryToWriter
    );
  }
  f = message.getHostTrigSklList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      Data_pb.SkillSet.serializeBinaryToWriter
    );
  }
  f = message.getDuelTrigSklList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      Data_pb.SkillSet.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 turns = 1;
 * @return {number}
 */
proto.ULZProto.MovePhaseSnapMod.prototype.getTurns = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ULZProto.MovePhaseSnapMod.prototype.setTurns = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 host_val = 2;
 * @return {number}
 */
proto.ULZProto.MovePhaseSnapMod.prototype.getHostVal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ULZProto.MovePhaseSnapMod.prototype.setHostVal = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 duel_val = 3;
 * @return {number}
 */
proto.ULZProto.MovePhaseSnapMod.prototype.getDuelVal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ULZProto.MovePhaseSnapMod.prototype.setDuelVal = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional MovePhaseOpt host_opt = 4;
 * @return {!proto.ULZProto.MovePhaseOpt}
 */
proto.ULZProto.MovePhaseSnapMod.prototype.getHostOpt = function() {
  return /** @type {!proto.ULZProto.MovePhaseOpt} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.ULZProto.MovePhaseOpt} value */
proto.ULZProto.MovePhaseSnapMod.prototype.setHostOpt = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional MovePhaseOpt duel_opt = 5;
 * @return {!proto.ULZProto.MovePhaseOpt}
 */
proto.ULZProto.MovePhaseSnapMod.prototype.getDuelOpt = function() {
  return /** @type {!proto.ULZProto.MovePhaseOpt} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.ULZProto.MovePhaseOpt} value */
proto.ULZProto.MovePhaseSnapMod.prototype.setDuelOpt = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * repeated EventCard host_card = 6;
 * @return {!Array<!proto.ULZProto.EventCard>}
 */
proto.ULZProto.MovePhaseSnapMod.prototype.getHostCardList = function() {
  return /** @type{!Array<!proto.ULZProto.EventCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, Data_pb.EventCard, 6));
};


/** @param {!Array<!proto.ULZProto.EventCard>} value */
proto.ULZProto.MovePhaseSnapMod.prototype.setHostCardList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.ULZProto.EventCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ULZProto.EventCard}
 */
proto.ULZProto.MovePhaseSnapMod.prototype.addHostCard = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.ULZProto.EventCard, opt_index);
};


proto.ULZProto.MovePhaseSnapMod.prototype.clearHostCardList = function() {
  this.setHostCardList([]);
};


/**
 * repeated EventCard duel_card = 7;
 * @return {!Array<!proto.ULZProto.EventCard>}
 */
proto.ULZProto.MovePhaseSnapMod.prototype.getDuelCardList = function() {
  return /** @type{!Array<!proto.ULZProto.EventCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, Data_pb.EventCard, 7));
};


/** @param {!Array<!proto.ULZProto.EventCard>} value */
proto.ULZProto.MovePhaseSnapMod.prototype.setDuelCardList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.ULZProto.EventCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ULZProto.EventCard}
 */
proto.ULZProto.MovePhaseSnapMod.prototype.addDuelCard = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.ULZProto.EventCard, opt_index);
};


proto.ULZProto.MovePhaseSnapMod.prototype.clearDuelCardList = function() {
  this.setDuelCardList([]);
};


/**
 * repeated SkillSet host_trig_skl = 8;
 * @return {!Array<!proto.ULZProto.SkillSet>}
 */
proto.ULZProto.MovePhaseSnapMod.prototype.getHostTrigSklList = function() {
  return /** @type{!Array<!proto.ULZProto.SkillSet>} */ (
    jspb.Message.getRepeatedWrapperField(this, Data_pb.SkillSet, 8));
};


/** @param {!Array<!proto.ULZProto.SkillSet>} value */
proto.ULZProto.MovePhaseSnapMod.prototype.setHostTrigSklList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.ULZProto.SkillSet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ULZProto.SkillSet}
 */
proto.ULZProto.MovePhaseSnapMod.prototype.addHostTrigSkl = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.ULZProto.SkillSet, opt_index);
};


proto.ULZProto.MovePhaseSnapMod.prototype.clearHostTrigSklList = function() {
  this.setHostTrigSklList([]);
};


/**
 * repeated SkillSet duel_trig_skl = 9;
 * @return {!Array<!proto.ULZProto.SkillSet>}
 */
proto.ULZProto.MovePhaseSnapMod.prototype.getDuelTrigSklList = function() {
  return /** @type{!Array<!proto.ULZProto.SkillSet>} */ (
    jspb.Message.getRepeatedWrapperField(this, Data_pb.SkillSet, 9));
};


/** @param {!Array<!proto.ULZProto.SkillSet>} value */
proto.ULZProto.MovePhaseSnapMod.prototype.setDuelTrigSklList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.ULZProto.SkillSet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ULZProto.SkillSet}
 */
proto.ULZProto.MovePhaseSnapMod.prototype.addDuelTrigSkl = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.ULZProto.SkillSet, opt_index);
};


proto.ULZProto.MovePhaseSnapMod.prototype.clearDuelTrigSklList = function() {
  this.setDuelTrigSklList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ULZProto.ADPhaseSnapMod = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ULZProto.ADPhaseSnapMod.repeatedFields_, null);
};
goog.inherits(proto.ULZProto.ADPhaseSnapMod, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ULZProto.ADPhaseSnapMod.displayName = 'proto.ULZProto.ADPhaseSnapMod';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ULZProto.ADPhaseSnapMod.repeatedFields_ = [7,8,9,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ULZProto.ADPhaseSnapMod.prototype.toObject = function(opt_includeInstance) {
  return proto.ULZProto.ADPhaseSnapMod.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ULZProto.ADPhaseSnapMod} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.ADPhaseSnapMod.toObject = function(includeInstance, msg) {
  var f, obj = {
    turns: jspb.Message.getFieldWithDefault(msg, 1, 0),
    firstAttack: jspb.Message.getFieldWithDefault(msg, 2, 0),
    currAttacker: jspb.Message.getFieldWithDefault(msg, 3, 0),
    eventPhase: jspb.Message.getFieldWithDefault(msg, 4, 0),
    attackVal: jspb.Message.getFieldWithDefault(msg, 5, 0),
    defenceVal: jspb.Message.getFieldWithDefault(msg, 6, 0),
    attackCardList: jspb.Message.toObjectList(msg.getAttackCardList(),
    Data_pb.EventCard.toObject, includeInstance),
    defenceCardList: jspb.Message.toObjectList(msg.getDefenceCardList(),
    Data_pb.EventCard.toObject, includeInstance),
    attackTrigSklList: jspb.Message.toObjectList(msg.getAttackTrigSklList(),
    Data_pb.SkillSet.toObject, includeInstance),
    defenceTrigSklList: jspb.Message.toObjectList(msg.getDefenceTrigSklList(),
    Data_pb.SkillSet.toObject, includeInstance),
    isProcessed: jspb.Message.getFieldWithDefault(msg, 11, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ULZProto.ADPhaseSnapMod}
 */
proto.ULZProto.ADPhaseSnapMod.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ULZProto.ADPhaseSnapMod;
  return proto.ULZProto.ADPhaseSnapMod.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ULZProto.ADPhaseSnapMod} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ULZProto.ADPhaseSnapMod}
 */
proto.ULZProto.ADPhaseSnapMod.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTurns(value);
      break;
    case 2:
      var value = /** @type {!proto.ULZProto.PlayerSide} */ (reader.readEnum());
      msg.setFirstAttack(value);
      break;
    case 3:
      var value = /** @type {!proto.ULZProto.PlayerSide} */ (reader.readEnum());
      msg.setCurrAttacker(value);
      break;
    case 4:
      var value = /** @type {!proto.ULZProto.EventHookPhase} */ (reader.readEnum());
      msg.setEventPhase(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAttackVal(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDefenceVal(value);
      break;
    case 7:
      var value = new Data_pb.EventCard;
      reader.readMessage(value,Data_pb.EventCard.deserializeBinaryFromReader);
      msg.addAttackCard(value);
      break;
    case 8:
      var value = new Data_pb.EventCard;
      reader.readMessage(value,Data_pb.EventCard.deserializeBinaryFromReader);
      msg.addDefenceCard(value);
      break;
    case 9:
      var value = new Data_pb.SkillSet;
      reader.readMessage(value,Data_pb.SkillSet.deserializeBinaryFromReader);
      msg.addAttackTrigSkl(value);
      break;
    case 10:
      var value = new Data_pb.SkillSet;
      reader.readMessage(value,Data_pb.SkillSet.deserializeBinaryFromReader);
      msg.addDefenceTrigSkl(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsProcessed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ULZProto.ADPhaseSnapMod.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ULZProto.ADPhaseSnapMod.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ULZProto.ADPhaseSnapMod} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.ADPhaseSnapMod.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTurns();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getFirstAttack();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCurrAttacker();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getEventPhase();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getAttackVal();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getDefenceVal();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getAttackCardList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      Data_pb.EventCard.serializeBinaryToWriter
    );
  }
  f = message.getDefenceCardList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      Data_pb.EventCard.serializeBinaryToWriter
    );
  }
  f = message.getAttackTrigSklList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      Data_pb.SkillSet.serializeBinaryToWriter
    );
  }
  f = message.getDefenceTrigSklList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      Data_pb.SkillSet.serializeBinaryToWriter
    );
  }
  f = message.getIsProcessed();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
};


/**
 * optional int32 turns = 1;
 * @return {number}
 */
proto.ULZProto.ADPhaseSnapMod.prototype.getTurns = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ULZProto.ADPhaseSnapMod.prototype.setTurns = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional PlayerSide first_attack = 2;
 * @return {!proto.ULZProto.PlayerSide}
 */
proto.ULZProto.ADPhaseSnapMod.prototype.getFirstAttack = function() {
  return /** @type {!proto.ULZProto.PlayerSide} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ULZProto.PlayerSide} value */
proto.ULZProto.ADPhaseSnapMod.prototype.setFirstAttack = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional PlayerSide curr_attacker = 3;
 * @return {!proto.ULZProto.PlayerSide}
 */
proto.ULZProto.ADPhaseSnapMod.prototype.getCurrAttacker = function() {
  return /** @type {!proto.ULZProto.PlayerSide} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.ULZProto.PlayerSide} value */
proto.ULZProto.ADPhaseSnapMod.prototype.setCurrAttacker = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional EventHookPhase event_phase = 4;
 * @return {!proto.ULZProto.EventHookPhase}
 */
proto.ULZProto.ADPhaseSnapMod.prototype.getEventPhase = function() {
  return /** @type {!proto.ULZProto.EventHookPhase} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.ULZProto.EventHookPhase} value */
proto.ULZProto.ADPhaseSnapMod.prototype.setEventPhase = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional int32 attack_val = 5;
 * @return {number}
 */
proto.ULZProto.ADPhaseSnapMod.prototype.getAttackVal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ULZProto.ADPhaseSnapMod.prototype.setAttackVal = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 defence_val = 6;
 * @return {number}
 */
proto.ULZProto.ADPhaseSnapMod.prototype.getDefenceVal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.ULZProto.ADPhaseSnapMod.prototype.setDefenceVal = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated EventCard attack_card = 7;
 * @return {!Array<!proto.ULZProto.EventCard>}
 */
proto.ULZProto.ADPhaseSnapMod.prototype.getAttackCardList = function() {
  return /** @type{!Array<!proto.ULZProto.EventCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, Data_pb.EventCard, 7));
};


/** @param {!Array<!proto.ULZProto.EventCard>} value */
proto.ULZProto.ADPhaseSnapMod.prototype.setAttackCardList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.ULZProto.EventCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ULZProto.EventCard}
 */
proto.ULZProto.ADPhaseSnapMod.prototype.addAttackCard = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.ULZProto.EventCard, opt_index);
};


proto.ULZProto.ADPhaseSnapMod.prototype.clearAttackCardList = function() {
  this.setAttackCardList([]);
};


/**
 * repeated EventCard defence_card = 8;
 * @return {!Array<!proto.ULZProto.EventCard>}
 */
proto.ULZProto.ADPhaseSnapMod.prototype.getDefenceCardList = function() {
  return /** @type{!Array<!proto.ULZProto.EventCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, Data_pb.EventCard, 8));
};


/** @param {!Array<!proto.ULZProto.EventCard>} value */
proto.ULZProto.ADPhaseSnapMod.prototype.setDefenceCardList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.ULZProto.EventCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ULZProto.EventCard}
 */
proto.ULZProto.ADPhaseSnapMod.prototype.addDefenceCard = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.ULZProto.EventCard, opt_index);
};


proto.ULZProto.ADPhaseSnapMod.prototype.clearDefenceCardList = function() {
  this.setDefenceCardList([]);
};


/**
 * repeated SkillSet attack_trig_skl = 9;
 * @return {!Array<!proto.ULZProto.SkillSet>}
 */
proto.ULZProto.ADPhaseSnapMod.prototype.getAttackTrigSklList = function() {
  return /** @type{!Array<!proto.ULZProto.SkillSet>} */ (
    jspb.Message.getRepeatedWrapperField(this, Data_pb.SkillSet, 9));
};


/** @param {!Array<!proto.ULZProto.SkillSet>} value */
proto.ULZProto.ADPhaseSnapMod.prototype.setAttackTrigSklList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.ULZProto.SkillSet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ULZProto.SkillSet}
 */
proto.ULZProto.ADPhaseSnapMod.prototype.addAttackTrigSkl = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.ULZProto.SkillSet, opt_index);
};


proto.ULZProto.ADPhaseSnapMod.prototype.clearAttackTrigSklList = function() {
  this.setAttackTrigSklList([]);
};


/**
 * repeated SkillSet defence_trig_skl = 10;
 * @return {!Array<!proto.ULZProto.SkillSet>}
 */
proto.ULZProto.ADPhaseSnapMod.prototype.getDefenceTrigSklList = function() {
  return /** @type{!Array<!proto.ULZProto.SkillSet>} */ (
    jspb.Message.getRepeatedWrapperField(this, Data_pb.SkillSet, 10));
};


/** @param {!Array<!proto.ULZProto.SkillSet>} value */
proto.ULZProto.ADPhaseSnapMod.prototype.setDefenceTrigSklList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.ULZProto.SkillSet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ULZProto.SkillSet}
 */
proto.ULZProto.ADPhaseSnapMod.prototype.addDefenceTrigSkl = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.ULZProto.SkillSet, opt_index);
};


proto.ULZProto.ADPhaseSnapMod.prototype.clearDefenceTrigSklList = function() {
  this.setDefenceTrigSklList([]);
};


/**
 * optional bool is_processed = 11;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ULZProto.ADPhaseSnapMod.prototype.getIsProcessed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 11, false));
};


/** @param {boolean} value */
proto.ULZProto.ADPhaseSnapMod.prototype.setIsProcessed = function(value) {
  jspb.Message.setProto3BooleanField(this, 11, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ULZProto.EffectNodeSnapMod = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ULZProto.EffectNodeSnapMod.repeatedFields_, null);
};
goog.inherits(proto.ULZProto.EffectNodeSnapMod, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ULZProto.EffectNodeSnapMod.displayName = 'proto.ULZProto.EffectNodeSnapMod';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ULZProto.EffectNodeSnapMod.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ULZProto.EffectNodeSnapMod.prototype.toObject = function(opt_includeInstance) {
  return proto.ULZProto.EffectNodeSnapMod.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ULZProto.EffectNodeSnapMod} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.EffectNodeSnapMod.toObject = function(includeInstance, msg) {
  var f, obj = {
    turns: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pendingEfList: jspb.Message.toObjectList(msg.getPendingEfList(),
    Data_pb.EffectResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ULZProto.EffectNodeSnapMod}
 */
proto.ULZProto.EffectNodeSnapMod.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ULZProto.EffectNodeSnapMod;
  return proto.ULZProto.EffectNodeSnapMod.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ULZProto.EffectNodeSnapMod} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ULZProto.EffectNodeSnapMod}
 */
proto.ULZProto.EffectNodeSnapMod.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTurns(value);
      break;
    case 2:
      var value = new Data_pb.EffectResult;
      reader.readMessage(value,Data_pb.EffectResult.deserializeBinaryFromReader);
      msg.addPendingEf(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ULZProto.EffectNodeSnapMod.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ULZProto.EffectNodeSnapMod.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ULZProto.EffectNodeSnapMod} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.EffectNodeSnapMod.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTurns();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPendingEfList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      Data_pb.EffectResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 turns = 1;
 * @return {number}
 */
proto.ULZProto.EffectNodeSnapMod.prototype.getTurns = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ULZProto.EffectNodeSnapMod.prototype.setTurns = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated EffectResult pending_ef = 2;
 * @return {!Array<!proto.ULZProto.EffectResult>}
 */
proto.ULZProto.EffectNodeSnapMod.prototype.getPendingEfList = function() {
  return /** @type{!Array<!proto.ULZProto.EffectResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, Data_pb.EffectResult, 2));
};


/** @param {!Array<!proto.ULZProto.EffectResult>} value */
proto.ULZProto.EffectNodeSnapMod.prototype.setPendingEfList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ULZProto.EffectResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ULZProto.EffectResult}
 */
proto.ULZProto.EffectNodeSnapMod.prototype.addPendingEf = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ULZProto.EffectResult, opt_index);
};


proto.ULZProto.EffectNodeSnapMod.prototype.clearPendingEfList = function() {
  this.setPendingEfList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ULZProto.PhaseSnapMod = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ULZProto.PhaseSnapMod, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ULZProto.PhaseSnapMod.displayName = 'proto.ULZProto.PhaseSnapMod';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ULZProto.PhaseSnapMod.prototype.toObject = function(opt_includeInstance) {
  return proto.ULZProto.PhaseSnapMod.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ULZProto.PhaseSnapMod} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.PhaseSnapMod.toObject = function(includeInstance, msg) {
  var f, obj = {
    turns: jspb.Message.getFieldWithDefault(msg, 1, 0),
    eventPhase: jspb.Message.getFieldWithDefault(msg, 2, 0),
    hookType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    isHostReady: jspb.Message.getFieldWithDefault(msg, 4, false),
    isDuelReady: jspb.Message.getFieldWithDefault(msg, 5, false),
    firstAttack: jspb.Message.getFieldWithDefault(msg, 6, 0),
    currAttack: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ULZProto.PhaseSnapMod}
 */
proto.ULZProto.PhaseSnapMod.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ULZProto.PhaseSnapMod;
  return proto.ULZProto.PhaseSnapMod.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ULZProto.PhaseSnapMod} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ULZProto.PhaseSnapMod}
 */
proto.ULZProto.PhaseSnapMod.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTurns(value);
      break;
    case 2:
      var value = /** @type {!proto.ULZProto.EventHookPhase} */ (reader.readEnum());
      msg.setEventPhase(value);
      break;
    case 3:
      var value = /** @type {!proto.ULZProto.EventHookType} */ (reader.readEnum());
      msg.setHookType(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsHostReady(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsDuelReady(value);
      break;
    case 6:
      var value = /** @type {!proto.ULZProto.PlayerSide} */ (reader.readEnum());
      msg.setFirstAttack(value);
      break;
    case 7:
      var value = /** @type {!proto.ULZProto.PlayerSide} */ (reader.readEnum());
      msg.setCurrAttack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ULZProto.PhaseSnapMod.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ULZProto.PhaseSnapMod.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ULZProto.PhaseSnapMod} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.PhaseSnapMod.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTurns();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getEventPhase();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getHookType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getIsHostReady();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getIsDuelReady();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getFirstAttack();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getCurrAttack();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
};


/**
 * optional int32 turns = 1;
 * @return {number}
 */
proto.ULZProto.PhaseSnapMod.prototype.getTurns = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ULZProto.PhaseSnapMod.prototype.setTurns = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional EventHookPhase event_phase = 2;
 * @return {!proto.ULZProto.EventHookPhase}
 */
proto.ULZProto.PhaseSnapMod.prototype.getEventPhase = function() {
  return /** @type {!proto.ULZProto.EventHookPhase} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ULZProto.EventHookPhase} value */
proto.ULZProto.PhaseSnapMod.prototype.setEventPhase = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional EventHookType hook_type = 3;
 * @return {!proto.ULZProto.EventHookType}
 */
proto.ULZProto.PhaseSnapMod.prototype.getHookType = function() {
  return /** @type {!proto.ULZProto.EventHookType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.ULZProto.EventHookType} value */
proto.ULZProto.PhaseSnapMod.prototype.setHookType = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bool is_host_ready = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ULZProto.PhaseSnapMod.prototype.getIsHostReady = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.ULZProto.PhaseSnapMod.prototype.setIsHostReady = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool is_duel_ready = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ULZProto.PhaseSnapMod.prototype.getIsDuelReady = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.ULZProto.PhaseSnapMod.prototype.setIsDuelReady = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional PlayerSide first_attack = 6;
 * @return {!proto.ULZProto.PlayerSide}
 */
proto.ULZProto.PhaseSnapMod.prototype.getFirstAttack = function() {
  return /** @type {!proto.ULZProto.PlayerSide} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.ULZProto.PlayerSide} value */
proto.ULZProto.PhaseSnapMod.prototype.setFirstAttack = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional PlayerSide curr_attack = 7;
 * @return {!proto.ULZProto.PlayerSide}
 */
proto.ULZProto.PhaseSnapMod.prototype.getCurrAttack = function() {
  return /** @type {!proto.ULZProto.PlayerSide} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.ULZProto.PlayerSide} value */
proto.ULZProto.PhaseSnapMod.prototype.setCurrAttack = function(value) {
  jspb.Message.setProto3EnumField(this, 7, value);
};


goog.object.extend(exports, proto.ULZProto);
