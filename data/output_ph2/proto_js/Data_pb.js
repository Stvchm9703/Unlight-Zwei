/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var EventHookPhase_pb = require('./EventHookPhase_pb.js');
goog.object.extend(proto, EventHookPhase_pb);
goog.exportSymbol('proto.ULZProto.CharCardEquSet', null, global);
goog.exportSymbol('proto.ULZProto.CharCardSet', null, global);
goog.exportSymbol('proto.ULZProto.EffectOption', null, global);
goog.exportSymbol('proto.ULZProto.EffectResult', null, global);
goog.exportSymbol('proto.ULZProto.EffectTiming', null, global);
goog.exportSymbol('proto.ULZProto.EventCard', null, global);
goog.exportSymbol('proto.ULZProto.EventCardFunc', null, global);
goog.exportSymbol('proto.ULZProto.EventCardPos', null, global);
goog.exportSymbol('proto.ULZProto.EventCardType', null, global);
goog.exportSymbol('proto.ULZProto.GameDataSet', null, global);
goog.exportSymbol('proto.ULZProto.MovePhaseOpt', null, global);
goog.exportSymbol('proto.ULZProto.PlayerSide', null, global);
goog.exportSymbol('proto.ULZProto.RangeType', null, global);
goog.exportSymbol('proto.ULZProto.SignEq', null, global);
goog.exportSymbol('proto.ULZProto.SkillCardCond', null, global);
goog.exportSymbol('proto.ULZProto.SkillSet', null, global);
goog.exportSymbol('proto.ULZProto.StatusSet', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ULZProto.GameDataSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ULZProto.GameDataSet.repeatedFields_, null);
};
goog.inherits(proto.ULZProto.GameDataSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ULZProto.GameDataSet.displayName = 'proto.ULZProto.GameDataSet';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ULZProto.GameDataSet.repeatedFields_ = [5,6,9,10,17];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ULZProto.GameDataSet.prototype.toObject = function(opt_includeInstance) {
  return proto.ULZProto.GameDataSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ULZProto.GameDataSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.GameDataSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    hostId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    duelId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    gameTurn: jspb.Message.getFieldWithDefault(msg, 4, 0),
    hostCardDeckList: jspb.Message.toObjectList(msg.getHostCardDeckList(),
    proto.ULZProto.CharCardSet.toObject, includeInstance),
    duelCardDeckList: jspb.Message.toObjectList(msg.getDuelCardDeckList(),
    proto.ULZProto.CharCardSet.toObject, includeInstance),
    hostCurrCardKey: jspb.Message.getFieldWithDefault(msg, 7, 0),
    duelCurrCardKey: jspb.Message.getFieldWithDefault(msg, 8, 0),
    hostEventCardDeckList: jspb.Message.toObjectList(msg.getHostEventCardDeckList(),
    proto.ULZProto.EventCard.toObject, includeInstance),
    duelEventCardDeckList: jspb.Message.toObjectList(msg.getDuelEventCardDeckList(),
    proto.ULZProto.EventCard.toObject, includeInstance),
    range: jspb.Message.getFieldWithDefault(msg, 11, 0),
    nvn: jspb.Message.getFieldWithDefault(msg, 12, 0),
    firstAttack: jspb.Message.getFieldWithDefault(msg, 13, 0),
    currPhase: jspb.Message.getFieldWithDefault(msg, 14, 0),
    eventPhase: jspb.Message.getFieldWithDefault(msg, 15, 0),
    hookType: jspb.Message.getFieldWithDefault(msg, 16, 0),
    effectCounterList: jspb.Message.toObjectList(msg.getEffectCounterList(),
    proto.ULZProto.EffectResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ULZProto.GameDataSet}
 */
proto.ULZProto.GameDataSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ULZProto.GameDataSet;
  return proto.ULZProto.GameDataSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ULZProto.GameDataSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ULZProto.GameDataSet}
 */
proto.ULZProto.GameDataSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDuelId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGameTurn(value);
      break;
    case 5:
      var value = new proto.ULZProto.CharCardSet;
      reader.readMessage(value,proto.ULZProto.CharCardSet.deserializeBinaryFromReader);
      msg.addHostCardDeck(value);
      break;
    case 6:
      var value = new proto.ULZProto.CharCardSet;
      reader.readMessage(value,proto.ULZProto.CharCardSet.deserializeBinaryFromReader);
      msg.addDuelCardDeck(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHostCurrCardKey(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDuelCurrCardKey(value);
      break;
    case 9:
      var value = new proto.ULZProto.EventCard;
      reader.readMessage(value,proto.ULZProto.EventCard.deserializeBinaryFromReader);
      msg.addHostEventCardDeck(value);
      break;
    case 10:
      var value = new proto.ULZProto.EventCard;
      reader.readMessage(value,proto.ULZProto.EventCard.deserializeBinaryFromReader);
      msg.addDuelEventCardDeck(value);
      break;
    case 11:
      var value = /** @type {!proto.ULZProto.RangeType} */ (reader.readEnum());
      msg.setRange(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNvn(value);
      break;
    case 13:
      var value = /** @type {!proto.ULZProto.PlayerSide} */ (reader.readEnum());
      msg.setFirstAttack(value);
      break;
    case 14:
      var value = /** @type {!proto.ULZProto.PlayerSide} */ (reader.readEnum());
      msg.setCurrPhase(value);
      break;
    case 15:
      var value = /** @type {!proto.ULZProto.EventHookPhase} */ (reader.readEnum());
      msg.setEventPhase(value);
      break;
    case 16:
      var value = /** @type {!proto.ULZProto.EventHookType} */ (reader.readEnum());
      msg.setHookType(value);
      break;
    case 17:
      var value = new proto.ULZProto.EffectResult;
      reader.readMessage(value,proto.ULZProto.EffectResult.deserializeBinaryFromReader);
      msg.addEffectCounter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ULZProto.GameDataSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ULZProto.GameDataSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ULZProto.GameDataSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.GameDataSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHostId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDuelId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGameTurn();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getHostCardDeckList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.ULZProto.CharCardSet.serializeBinaryToWriter
    );
  }
  f = message.getDuelCardDeckList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.ULZProto.CharCardSet.serializeBinaryToWriter
    );
  }
  f = message.getHostCurrCardKey();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getDuelCurrCardKey();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getHostEventCardDeckList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.ULZProto.EventCard.serializeBinaryToWriter
    );
  }
  f = message.getDuelEventCardDeckList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.ULZProto.EventCard.serializeBinaryToWriter
    );
  }
  f = message.getRange();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = message.getNvn();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getFirstAttack();
  if (f !== 0.0) {
    writer.writeEnum(
      13,
      f
    );
  }
  f = message.getCurrPhase();
  if (f !== 0.0) {
    writer.writeEnum(
      14,
      f
    );
  }
  f = message.getEventPhase();
  if (f !== 0.0) {
    writer.writeEnum(
      15,
      f
    );
  }
  f = message.getHookType();
  if (f !== 0.0) {
    writer.writeEnum(
      16,
      f
    );
  }
  f = message.getEffectCounterList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      17,
      f,
      proto.ULZProto.EffectResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional string room_key = 1;
 * @return {string}
 */
proto.ULZProto.GameDataSet.prototype.getRoomKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ULZProto.GameDataSet.prototype.setRoomKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string host_id = 2;
 * @return {string}
 */
proto.ULZProto.GameDataSet.prototype.getHostId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ULZProto.GameDataSet.prototype.setHostId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string duel_id = 3;
 * @return {string}
 */
proto.ULZProto.GameDataSet.prototype.getDuelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.ULZProto.GameDataSet.prototype.setDuelId = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 game_turn = 4;
 * @return {number}
 */
proto.ULZProto.GameDataSet.prototype.getGameTurn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ULZProto.GameDataSet.prototype.setGameTurn = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated CharCardSet host_card_deck = 5;
 * @return {!Array<!proto.ULZProto.CharCardSet>}
 */
proto.ULZProto.GameDataSet.prototype.getHostCardDeckList = function() {
  return /** @type{!Array<!proto.ULZProto.CharCardSet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ULZProto.CharCardSet, 5));
};


/** @param {!Array<!proto.ULZProto.CharCardSet>} value */
proto.ULZProto.GameDataSet.prototype.setHostCardDeckList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.ULZProto.CharCardSet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ULZProto.CharCardSet}
 */
proto.ULZProto.GameDataSet.prototype.addHostCardDeck = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.ULZProto.CharCardSet, opt_index);
};


proto.ULZProto.GameDataSet.prototype.clearHostCardDeckList = function() {
  this.setHostCardDeckList([]);
};


/**
 * repeated CharCardSet duel_card_deck = 6;
 * @return {!Array<!proto.ULZProto.CharCardSet>}
 */
proto.ULZProto.GameDataSet.prototype.getDuelCardDeckList = function() {
  return /** @type{!Array<!proto.ULZProto.CharCardSet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ULZProto.CharCardSet, 6));
};


/** @param {!Array<!proto.ULZProto.CharCardSet>} value */
proto.ULZProto.GameDataSet.prototype.setDuelCardDeckList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.ULZProto.CharCardSet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ULZProto.CharCardSet}
 */
proto.ULZProto.GameDataSet.prototype.addDuelCardDeck = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.ULZProto.CharCardSet, opt_index);
};


proto.ULZProto.GameDataSet.prototype.clearDuelCardDeckList = function() {
  this.setDuelCardDeckList([]);
};


/**
 * optional int32 host_curr_card_key = 7;
 * @return {number}
 */
proto.ULZProto.GameDataSet.prototype.getHostCurrCardKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.ULZProto.GameDataSet.prototype.setHostCurrCardKey = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 duel_curr_card_key = 8;
 * @return {number}
 */
proto.ULZProto.GameDataSet.prototype.getDuelCurrCardKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.ULZProto.GameDataSet.prototype.setDuelCurrCardKey = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * repeated EventCard host_event_card_deck = 9;
 * @return {!Array<!proto.ULZProto.EventCard>}
 */
proto.ULZProto.GameDataSet.prototype.getHostEventCardDeckList = function() {
  return /** @type{!Array<!proto.ULZProto.EventCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ULZProto.EventCard, 9));
};


/** @param {!Array<!proto.ULZProto.EventCard>} value */
proto.ULZProto.GameDataSet.prototype.setHostEventCardDeckList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.ULZProto.EventCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ULZProto.EventCard}
 */
proto.ULZProto.GameDataSet.prototype.addHostEventCardDeck = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.ULZProto.EventCard, opt_index);
};


proto.ULZProto.GameDataSet.prototype.clearHostEventCardDeckList = function() {
  this.setHostEventCardDeckList([]);
};


/**
 * repeated EventCard duel_event_card_deck = 10;
 * @return {!Array<!proto.ULZProto.EventCard>}
 */
proto.ULZProto.GameDataSet.prototype.getDuelEventCardDeckList = function() {
  return /** @type{!Array<!proto.ULZProto.EventCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ULZProto.EventCard, 10));
};


/** @param {!Array<!proto.ULZProto.EventCard>} value */
proto.ULZProto.GameDataSet.prototype.setDuelEventCardDeckList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.ULZProto.EventCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ULZProto.EventCard}
 */
proto.ULZProto.GameDataSet.prototype.addDuelEventCardDeck = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.ULZProto.EventCard, opt_index);
};


proto.ULZProto.GameDataSet.prototype.clearDuelEventCardDeckList = function() {
  this.setDuelEventCardDeckList([]);
};


/**
 * optional RangeType range = 11;
 * @return {!proto.ULZProto.RangeType}
 */
proto.ULZProto.GameDataSet.prototype.getRange = function() {
  return /** @type {!proto.ULZProto.RangeType} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {!proto.ULZProto.RangeType} value */
proto.ULZProto.GameDataSet.prototype.setRange = function(value) {
  jspb.Message.setProto3EnumField(this, 11, value);
};


/**
 * optional int32 nvn = 12;
 * @return {number}
 */
proto.ULZProto.GameDataSet.prototype.getNvn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.ULZProto.GameDataSet.prototype.setNvn = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional PlayerSide first_attack = 13;
 * @return {!proto.ULZProto.PlayerSide}
 */
proto.ULZProto.GameDataSet.prototype.getFirstAttack = function() {
  return /** @type {!proto.ULZProto.PlayerSide} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {!proto.ULZProto.PlayerSide} value */
proto.ULZProto.GameDataSet.prototype.setFirstAttack = function(value) {
  jspb.Message.setProto3EnumField(this, 13, value);
};


/**
 * optional PlayerSide curr_phase = 14;
 * @return {!proto.ULZProto.PlayerSide}
 */
proto.ULZProto.GameDataSet.prototype.getCurrPhase = function() {
  return /** @type {!proto.ULZProto.PlayerSide} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {!proto.ULZProto.PlayerSide} value */
proto.ULZProto.GameDataSet.prototype.setCurrPhase = function(value) {
  jspb.Message.setProto3EnumField(this, 14, value);
};


/**
 * optional EventHookPhase event_phase = 15;
 * @return {!proto.ULZProto.EventHookPhase}
 */
proto.ULZProto.GameDataSet.prototype.getEventPhase = function() {
  return /** @type {!proto.ULZProto.EventHookPhase} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {!proto.ULZProto.EventHookPhase} value */
proto.ULZProto.GameDataSet.prototype.setEventPhase = function(value) {
  jspb.Message.setProto3EnumField(this, 15, value);
};


/**
 * optional EventHookType hook_type = 16;
 * @return {!proto.ULZProto.EventHookType}
 */
proto.ULZProto.GameDataSet.prototype.getHookType = function() {
  return /** @type {!proto.ULZProto.EventHookType} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {!proto.ULZProto.EventHookType} value */
proto.ULZProto.GameDataSet.prototype.setHookType = function(value) {
  jspb.Message.setProto3EnumField(this, 16, value);
};


/**
 * repeated EffectResult effect_counter = 17;
 * @return {!Array<!proto.ULZProto.EffectResult>}
 */
proto.ULZProto.GameDataSet.prototype.getEffectCounterList = function() {
  return /** @type{!Array<!proto.ULZProto.EffectResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ULZProto.EffectResult, 17));
};


/** @param {!Array<!proto.ULZProto.EffectResult>} value */
proto.ULZProto.GameDataSet.prototype.setEffectCounterList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 17, value);
};


/**
 * @param {!proto.ULZProto.EffectResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ULZProto.EffectResult}
 */
proto.ULZProto.GameDataSet.prototype.addEffectCounter = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 17, opt_value, proto.ULZProto.EffectResult, opt_index);
};


proto.ULZProto.GameDataSet.prototype.clearEffectCounterList = function() {
  this.setEffectCounterList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ULZProto.CharCardSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ULZProto.CharCardSet.repeatedFields_, null);
};
goog.inherits(proto.ULZProto.CharCardSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ULZProto.CharCardSet.displayName = 'proto.ULZProto.CharCardSet';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ULZProto.CharCardSet.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ULZProto.CharCardSet.prototype.toObject = function(opt_includeInstance) {
  return proto.ULZProto.CharCardSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ULZProto.CharCardSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.CharCardSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    charId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cardId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    hpInst: jspb.Message.getFieldWithDefault(msg, 3, 0),
    apInst: jspb.Message.getFieldWithDefault(msg, 4, 0),
    dpInst: jspb.Message.getFieldWithDefault(msg, 5, 0),
    hpOrig: jspb.Message.getFieldWithDefault(msg, 6, 0),
    apOrig: jspb.Message.getFieldWithDefault(msg, 7, 0),
    dpOrig: jspb.Message.getFieldWithDefault(msg, 8, 0),
    level: jspb.Message.getFieldWithDefault(msg, 9, 0),
    statusInstList: jspb.Message.toObjectList(msg.getStatusInstList(),
    proto.ULZProto.StatusSet.toObject, includeInstance),
    equSet: (f = msg.getEquSet()) && proto.ULZProto.CharCardEquSet.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ULZProto.CharCardSet}
 */
proto.ULZProto.CharCardSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ULZProto.CharCardSet;
  return proto.ULZProto.CharCardSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ULZProto.CharCardSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ULZProto.CharCardSet}
 */
proto.ULZProto.CharCardSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCharId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCardId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHpInst(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setApInst(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDpInst(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHpOrig(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setApOrig(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDpOrig(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevel(value);
      break;
    case 10:
      var value = new proto.ULZProto.StatusSet;
      reader.readMessage(value,proto.ULZProto.StatusSet.deserializeBinaryFromReader);
      msg.addStatusInst(value);
      break;
    case 11:
      var value = new proto.ULZProto.CharCardEquSet;
      reader.readMessage(value,proto.ULZProto.CharCardEquSet.deserializeBinaryFromReader);
      msg.setEquSet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ULZProto.CharCardSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ULZProto.CharCardSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ULZProto.CharCardSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.CharCardSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCharId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCardId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getHpInst();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getApInst();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getDpInst();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getHpOrig();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getApOrig();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getDpOrig();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getStatusInstList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.ULZProto.StatusSet.serializeBinaryToWriter
    );
  }
  f = message.getEquSet();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.ULZProto.CharCardEquSet.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 char_id = 1;
 * @return {number}
 */
proto.ULZProto.CharCardSet.prototype.getCharId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ULZProto.CharCardSet.prototype.setCharId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 card_id = 2;
 * @return {number}
 */
proto.ULZProto.CharCardSet.prototype.getCardId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ULZProto.CharCardSet.prototype.setCardId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 hp_inst = 3;
 * @return {number}
 */
proto.ULZProto.CharCardSet.prototype.getHpInst = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ULZProto.CharCardSet.prototype.setHpInst = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 ap_inst = 4;
 * @return {number}
 */
proto.ULZProto.CharCardSet.prototype.getApInst = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ULZProto.CharCardSet.prototype.setApInst = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 dp_inst = 5;
 * @return {number}
 */
proto.ULZProto.CharCardSet.prototype.getDpInst = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ULZProto.CharCardSet.prototype.setDpInst = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 hp_orig = 6;
 * @return {number}
 */
proto.ULZProto.CharCardSet.prototype.getHpOrig = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.ULZProto.CharCardSet.prototype.setHpOrig = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 ap_orig = 7;
 * @return {number}
 */
proto.ULZProto.CharCardSet.prototype.getApOrig = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.ULZProto.CharCardSet.prototype.setApOrig = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 dp_orig = 8;
 * @return {number}
 */
proto.ULZProto.CharCardSet.prototype.getDpOrig = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.ULZProto.CharCardSet.prototype.setDpOrig = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 level = 9;
 * @return {number}
 */
proto.ULZProto.CharCardSet.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.ULZProto.CharCardSet.prototype.setLevel = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * repeated StatusSet status_inst = 10;
 * @return {!Array<!proto.ULZProto.StatusSet>}
 */
proto.ULZProto.CharCardSet.prototype.getStatusInstList = function() {
  return /** @type{!Array<!proto.ULZProto.StatusSet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ULZProto.StatusSet, 10));
};


/** @param {!Array<!proto.ULZProto.StatusSet>} value */
proto.ULZProto.CharCardSet.prototype.setStatusInstList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.ULZProto.StatusSet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ULZProto.StatusSet}
 */
proto.ULZProto.CharCardSet.prototype.addStatusInst = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.ULZProto.StatusSet, opt_index);
};


proto.ULZProto.CharCardSet.prototype.clearStatusInstList = function() {
  this.setStatusInstList([]);
};


/**
 * optional CharCardEquSet equ_set = 11;
 * @return {?proto.ULZProto.CharCardEquSet}
 */
proto.ULZProto.CharCardSet.prototype.getEquSet = function() {
  return /** @type{?proto.ULZProto.CharCardEquSet} */ (
    jspb.Message.getWrapperField(this, proto.ULZProto.CharCardEquSet, 11));
};


/** @param {?proto.ULZProto.CharCardEquSet|undefined} value */
proto.ULZProto.CharCardSet.prototype.setEquSet = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.ULZProto.CharCardSet.prototype.clearEquSet = function() {
  this.setEquSet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ULZProto.CharCardSet.prototype.hasEquSet = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ULZProto.CharCardEquSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ULZProto.CharCardEquSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ULZProto.CharCardEquSet.displayName = 'proto.ULZProto.CharCardEquSet';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ULZProto.CharCardEquSet.prototype.toObject = function(opt_includeInstance) {
  return proto.ULZProto.CharCardEquSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ULZProto.CharCardEquSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.CharCardEquSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    equId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    hp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    ap: jspb.Message.getFieldWithDefault(msg, 3, 0),
    dp: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ULZProto.CharCardEquSet}
 */
proto.ULZProto.CharCardEquSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ULZProto.CharCardEquSet;
  return proto.ULZProto.CharCardEquSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ULZProto.CharCardEquSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ULZProto.CharCardEquSet}
 */
proto.ULZProto.CharCardEquSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEquId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ULZProto.CharCardEquSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ULZProto.CharCardEquSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ULZProto.CharCardEquSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.CharCardEquSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEquId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getHp();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getAp();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getDp();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 equ_id = 1;
 * @return {number}
 */
proto.ULZProto.CharCardEquSet.prototype.getEquId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ULZProto.CharCardEquSet.prototype.setEquId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 hp = 2;
 * @return {number}
 */
proto.ULZProto.CharCardEquSet.prototype.getHp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ULZProto.CharCardEquSet.prototype.setHp = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 ap = 3;
 * @return {number}
 */
proto.ULZProto.CharCardEquSet.prototype.getAp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ULZProto.CharCardEquSet.prototype.setAp = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 dp = 4;
 * @return {number}
 */
proto.ULZProto.CharCardEquSet.prototype.getDp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ULZProto.CharCardEquSet.prototype.setDp = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ULZProto.EventCard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ULZProto.EventCard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ULZProto.EventCard.displayName = 'proto.ULZProto.EventCard';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ULZProto.EventCard.prototype.toObject = function(opt_includeInstance) {
  return proto.ULZProto.EventCard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ULZProto.EventCard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.EventCard.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    upOption: jspb.Message.getFieldWithDefault(msg, 2, 0),
    upVal: jspb.Message.getFieldWithDefault(msg, 3, 0),
    downOption: jspb.Message.getFieldWithDefault(msg, 4, 0),
    downVal: jspb.Message.getFieldWithDefault(msg, 5, 0),
    position: jspb.Message.getFieldWithDefault(msg, 6, 0),
    isInvert: jspb.Message.getFieldWithDefault(msg, 7, false),
    funcMount: jspb.Message.getFieldWithDefault(msg, 8, 0),
    mountVal: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ULZProto.EventCard}
 */
proto.ULZProto.EventCard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ULZProto.EventCard;
  return proto.ULZProto.EventCard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ULZProto.EventCard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ULZProto.EventCard}
 */
proto.ULZProto.EventCard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.ULZProto.EventCardType} */ (reader.readEnum());
      msg.setUpOption(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUpVal(value);
      break;
    case 4:
      var value = /** @type {!proto.ULZProto.EventCardType} */ (reader.readEnum());
      msg.setDownOption(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDownVal(value);
      break;
    case 6:
      var value = /** @type {!proto.ULZProto.EventCardPos} */ (reader.readEnum());
      msg.setPosition(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsInvert(value);
      break;
    case 8:
      var value = /** @type {!proto.ULZProto.EventCardFunc} */ (reader.readEnum());
      msg.setFuncMount(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMountVal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ULZProto.EventCard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ULZProto.EventCard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ULZProto.EventCard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.EventCard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getUpOption();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getUpVal();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getDownOption();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getDownVal();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getPosition();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getIsInvert();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getFuncMount();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getMountVal();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.ULZProto.EventCard.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ULZProto.EventCard.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional EventCardType up_option = 2;
 * @return {!proto.ULZProto.EventCardType}
 */
proto.ULZProto.EventCard.prototype.getUpOption = function() {
  return /** @type {!proto.ULZProto.EventCardType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ULZProto.EventCardType} value */
proto.ULZProto.EventCard.prototype.setUpOption = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int32 up_val = 3;
 * @return {number}
 */
proto.ULZProto.EventCard.prototype.getUpVal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ULZProto.EventCard.prototype.setUpVal = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional EventCardType down_option = 4;
 * @return {!proto.ULZProto.EventCardType}
 */
proto.ULZProto.EventCard.prototype.getDownOption = function() {
  return /** @type {!proto.ULZProto.EventCardType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.ULZProto.EventCardType} value */
proto.ULZProto.EventCard.prototype.setDownOption = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional int32 down_val = 5;
 * @return {number}
 */
proto.ULZProto.EventCard.prototype.getDownVal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ULZProto.EventCard.prototype.setDownVal = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional EventCardPos position = 6;
 * @return {!proto.ULZProto.EventCardPos}
 */
proto.ULZProto.EventCard.prototype.getPosition = function() {
  return /** @type {!proto.ULZProto.EventCardPos} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.ULZProto.EventCardPos} value */
proto.ULZProto.EventCard.prototype.setPosition = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional bool is_invert = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ULZProto.EventCard.prototype.getIsInvert = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.ULZProto.EventCard.prototype.setIsInvert = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional EventCardFunc func_mount = 8;
 * @return {!proto.ULZProto.EventCardFunc}
 */
proto.ULZProto.EventCard.prototype.getFuncMount = function() {
  return /** @type {!proto.ULZProto.EventCardFunc} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {!proto.ULZProto.EventCardFunc} value */
proto.ULZProto.EventCard.prototype.setFuncMount = function(value) {
  jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional int32 mount_val = 9;
 * @return {number}
 */
proto.ULZProto.EventCard.prototype.getMountVal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.ULZProto.EventCard.prototype.setMountVal = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ULZProto.SkillSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ULZProto.SkillSet.repeatedFields_, null);
};
goog.inherits(proto.ULZProto.SkillSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ULZProto.SkillSet.displayName = 'proto.ULZProto.SkillSet';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ULZProto.SkillSet.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ULZProto.SkillSet.prototype.toObject = function(opt_includeInstance) {
  return proto.ULZProto.SkillSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ULZProto.SkillSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.SkillSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    featNo: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pow: jspb.Message.getFieldWithDefault(msg, 3, 0),
    condString: jspb.Message.getFieldWithDefault(msg, 4, ""),
    condCardList: jspb.Message.toObjectList(msg.getCondCardList(),
    proto.ULZProto.SkillCardCond.toObject, includeInstance),
    condRange: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ULZProto.SkillSet}
 */
proto.ULZProto.SkillSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ULZProto.SkillSet;
  return proto.ULZProto.SkillSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ULZProto.SkillSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ULZProto.SkillSet}
 */
proto.ULZProto.SkillSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFeatNo(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPow(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCondString(value);
      break;
    case 5:
      var value = new proto.ULZProto.SkillCardCond;
      reader.readMessage(value,proto.ULZProto.SkillCardCond.deserializeBinaryFromReader);
      msg.addCondCard(value);
      break;
    case 6:
      var value = /** @type {!proto.ULZProto.RangeType} */ (reader.readEnum());
      msg.setCondRange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ULZProto.SkillSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ULZProto.SkillSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ULZProto.SkillSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.SkillSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getFeatNo();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPow();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getCondString();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCondCardList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.ULZProto.SkillCardCond.serializeBinaryToWriter
    );
  }
  f = message.getCondRange();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.ULZProto.SkillSet.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ULZProto.SkillSet.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 feat_no = 2;
 * @return {number}
 */
proto.ULZProto.SkillSet.prototype.getFeatNo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ULZProto.SkillSet.prototype.setFeatNo = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 pow = 3;
 * @return {number}
 */
proto.ULZProto.SkillSet.prototype.getPow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ULZProto.SkillSet.prototype.setPow = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string cond_string = 4;
 * @return {string}
 */
proto.ULZProto.SkillSet.prototype.getCondString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.ULZProto.SkillSet.prototype.setCondString = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated SkillCardCond cond_card = 5;
 * @return {!Array<!proto.ULZProto.SkillCardCond>}
 */
proto.ULZProto.SkillSet.prototype.getCondCardList = function() {
  return /** @type{!Array<!proto.ULZProto.SkillCardCond>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ULZProto.SkillCardCond, 5));
};


/** @param {!Array<!proto.ULZProto.SkillCardCond>} value */
proto.ULZProto.SkillSet.prototype.setCondCardList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.ULZProto.SkillCardCond=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ULZProto.SkillCardCond}
 */
proto.ULZProto.SkillSet.prototype.addCondCard = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.ULZProto.SkillCardCond, opt_index);
};


proto.ULZProto.SkillSet.prototype.clearCondCardList = function() {
  this.setCondCardList([]);
};


/**
 * optional RangeType cond_range = 6;
 * @return {!proto.ULZProto.RangeType}
 */
proto.ULZProto.SkillSet.prototype.getCondRange = function() {
  return /** @type {!proto.ULZProto.RangeType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.ULZProto.RangeType} value */
proto.ULZProto.SkillSet.prototype.setCondRange = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ULZProto.SkillCardCond = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ULZProto.SkillCardCond, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ULZProto.SkillCardCond.displayName = 'proto.ULZProto.SkillCardCond';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ULZProto.SkillCardCond.prototype.toObject = function(opt_includeInstance) {
  return proto.ULZProto.SkillCardCond.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ULZProto.SkillCardCond} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.SkillCardCond.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    val: jspb.Message.getFieldWithDefault(msg, 2, 0),
    compare: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ULZProto.SkillCardCond}
 */
proto.ULZProto.SkillCardCond.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ULZProto.SkillCardCond;
  return proto.ULZProto.SkillCardCond.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ULZProto.SkillCardCond} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ULZProto.SkillCardCond}
 */
proto.ULZProto.SkillCardCond.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ULZProto.EventCardType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVal(value);
      break;
    case 3:
      var value = /** @type {!proto.ULZProto.SignEq} */ (reader.readEnum());
      msg.setCompare(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ULZProto.SkillCardCond.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ULZProto.SkillCardCond.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ULZProto.SkillCardCond} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.SkillCardCond.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getVal();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getCompare();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional EventCardType type = 1;
 * @return {!proto.ULZProto.EventCardType}
 */
proto.ULZProto.SkillCardCond.prototype.getType = function() {
  return /** @type {!proto.ULZProto.EventCardType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ULZProto.EventCardType} value */
proto.ULZProto.SkillCardCond.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 val = 2;
 * @return {number}
 */
proto.ULZProto.SkillCardCond.prototype.getVal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ULZProto.SkillCardCond.prototype.setVal = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional SignEq compare = 3;
 * @return {!proto.ULZProto.SignEq}
 */
proto.ULZProto.SkillCardCond.prototype.getCompare = function() {
  return /** @type {!proto.ULZProto.SignEq} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.ULZProto.SignEq} value */
proto.ULZProto.SkillCardCond.prototype.setCompare = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ULZProto.StatusSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ULZProto.StatusSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ULZProto.StatusSet.displayName = 'proto.ULZProto.StatusSet';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ULZProto.StatusSet.prototype.toObject = function(opt_includeInstance) {
  return proto.ULZProto.StatusSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ULZProto.StatusSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.StatusSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    statusId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    remainCd: jspb.Message.getFieldWithDefault(msg, 3, 0),
    featNo: jspb.Message.getFieldWithDefault(msg, 4, 0),
    pow: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ULZProto.StatusSet}
 */
proto.ULZProto.StatusSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ULZProto.StatusSet;
  return proto.ULZProto.StatusSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ULZProto.StatusSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ULZProto.StatusSet}
 */
proto.ULZProto.StatusSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatusId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRemainCd(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFeatNo(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ULZProto.StatusSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ULZProto.StatusSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ULZProto.StatusSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.StatusSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getStatusId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRemainCd();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getFeatNo();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getPow();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.ULZProto.StatusSet.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ULZProto.StatusSet.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string status_id = 2;
 * @return {string}
 */
proto.ULZProto.StatusSet.prototype.getStatusId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ULZProto.StatusSet.prototype.setStatusId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 remain_cd = 3;
 * @return {number}
 */
proto.ULZProto.StatusSet.prototype.getRemainCd = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ULZProto.StatusSet.prototype.setRemainCd = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 feat_no = 4;
 * @return {number}
 */
proto.ULZProto.StatusSet.prototype.getFeatNo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ULZProto.StatusSet.prototype.setFeatNo = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 pow = 5;
 * @return {number}
 */
proto.ULZProto.StatusSet.prototype.getPow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ULZProto.StatusSet.prototype.setPow = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ULZProto.EffectResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ULZProto.EffectResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ULZProto.EffectResult.displayName = 'proto.ULZProto.EffectResult';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ULZProto.EffectResult.prototype.toObject = function(opt_includeInstance) {
  return proto.ULZProto.EffectResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ULZProto.EffectResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.EffectResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    tarCard: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tarSide: jspb.Message.getFieldWithDefault(msg, 2, 0),
    triggerTime: (f = msg.getTriggerTime()) && proto.ULZProto.EffectTiming.toObject(includeInstance, f),
    endTime: (f = msg.getEndTime()) && proto.ULZProto.EffectTiming.toObject(includeInstance, f),
    efOption: jspb.Message.getFieldWithDefault(msg, 5, 0),
    hp: jspb.Message.getFieldWithDefault(msg, 6, 0),
    ap: jspb.Message.getFieldWithDefault(msg, 7, 0),
    dp: jspb.Message.getFieldWithDefault(msg, 8, 0),
    mp: jspb.Message.getFieldWithDefault(msg, 9, 0),
    disableMove: jspb.Message.getFieldWithDefault(msg, 10, false),
    disableAtk: jspb.Message.getFieldWithDefault(msg, 11, false),
    disableDef: jspb.Message.getFieldWithDefault(msg, 12, false),
    disableDraw: jspb.Message.getFieldWithDefault(msg, 13, false),
    disableChange: jspb.Message.getFieldWithDefault(msg, 14, false),
    bindingFunc: jspb.Message.getFieldWithDefault(msg, 15, ""),
    remainCd: jspb.Message.getFieldWithDefault(msg, 16, 0),
    assignFrom: jspb.Message.getFieldWithDefault(msg, 17, ""),
    skillId: jspb.Message.getFieldWithDefault(msg, 18, 0),
    statusId: jspb.Message.getFieldWithDefault(msg, 19, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ULZProto.EffectResult}
 */
proto.ULZProto.EffectResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ULZProto.EffectResult;
  return proto.ULZProto.EffectResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ULZProto.EffectResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ULZProto.EffectResult}
 */
proto.ULZProto.EffectResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTarCard(value);
      break;
    case 2:
      var value = /** @type {!proto.ULZProto.PlayerSide} */ (reader.readEnum());
      msg.setTarSide(value);
      break;
    case 3:
      var value = new proto.ULZProto.EffectTiming;
      reader.readMessage(value,proto.ULZProto.EffectTiming.deserializeBinaryFromReader);
      msg.setTriggerTime(value);
      break;
    case 4:
      var value = new proto.ULZProto.EffectTiming;
      reader.readMessage(value,proto.ULZProto.EffectTiming.deserializeBinaryFromReader);
      msg.setEndTime(value);
      break;
    case 5:
      var value = /** @type {!proto.ULZProto.EffectOption} */ (reader.readEnum());
      msg.setEfOption(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHp(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAp(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDp(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMp(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisableMove(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisableAtk(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisableDef(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisableDraw(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisableChange(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setBindingFunc(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRemainCd(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssignFrom(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSkillId(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatusId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ULZProto.EffectResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ULZProto.EffectResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ULZProto.EffectResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.EffectResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTarCard();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTarSide();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTriggerTime();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ULZProto.EffectTiming.serializeBinaryToWriter
    );
  }
  f = message.getEndTime();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ULZProto.EffectTiming.serializeBinaryToWriter
    );
  }
  f = message.getEfOption();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getHp();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getAp();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getDp();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getMp();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getDisableMove();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getDisableAtk();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getDisableDef();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getDisableDraw();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getDisableChange();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getBindingFunc();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getRemainCd();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getAssignFrom();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getSkillId();
  if (f !== 0) {
    writer.writeInt32(
      18,
      f
    );
  }
  f = message.getStatusId();
  if (f !== 0) {
    writer.writeInt32(
      19,
      f
    );
  }
};


/**
 * optional int32 tar_card = 1;
 * @return {number}
 */
proto.ULZProto.EffectResult.prototype.getTarCard = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ULZProto.EffectResult.prototype.setTarCard = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional PlayerSide tar_side = 2;
 * @return {!proto.ULZProto.PlayerSide}
 */
proto.ULZProto.EffectResult.prototype.getTarSide = function() {
  return /** @type {!proto.ULZProto.PlayerSide} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ULZProto.PlayerSide} value */
proto.ULZProto.EffectResult.prototype.setTarSide = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional EffectTiming trigger_time = 3;
 * @return {?proto.ULZProto.EffectTiming}
 */
proto.ULZProto.EffectResult.prototype.getTriggerTime = function() {
  return /** @type{?proto.ULZProto.EffectTiming} */ (
    jspb.Message.getWrapperField(this, proto.ULZProto.EffectTiming, 3));
};


/** @param {?proto.ULZProto.EffectTiming|undefined} value */
proto.ULZProto.EffectResult.prototype.setTriggerTime = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.ULZProto.EffectResult.prototype.clearTriggerTime = function() {
  this.setTriggerTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ULZProto.EffectResult.prototype.hasTriggerTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EffectTiming end_time = 4;
 * @return {?proto.ULZProto.EffectTiming}
 */
proto.ULZProto.EffectResult.prototype.getEndTime = function() {
  return /** @type{?proto.ULZProto.EffectTiming} */ (
    jspb.Message.getWrapperField(this, proto.ULZProto.EffectTiming, 4));
};


/** @param {?proto.ULZProto.EffectTiming|undefined} value */
proto.ULZProto.EffectResult.prototype.setEndTime = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.ULZProto.EffectResult.prototype.clearEndTime = function() {
  this.setEndTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ULZProto.EffectResult.prototype.hasEndTime = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional EffectOption ef_option = 5;
 * @return {!proto.ULZProto.EffectOption}
 */
proto.ULZProto.EffectResult.prototype.getEfOption = function() {
  return /** @type {!proto.ULZProto.EffectOption} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.ULZProto.EffectOption} value */
proto.ULZProto.EffectResult.prototype.setEfOption = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional int32 hp = 6;
 * @return {number}
 */
proto.ULZProto.EffectResult.prototype.getHp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.ULZProto.EffectResult.prototype.setHp = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 ap = 7;
 * @return {number}
 */
proto.ULZProto.EffectResult.prototype.getAp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.ULZProto.EffectResult.prototype.setAp = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 dp = 8;
 * @return {number}
 */
proto.ULZProto.EffectResult.prototype.getDp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.ULZProto.EffectResult.prototype.setDp = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 mp = 9;
 * @return {number}
 */
proto.ULZProto.EffectResult.prototype.getMp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.ULZProto.EffectResult.prototype.setMp = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional bool disable_move = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ULZProto.EffectResult.prototype.getDisableMove = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.ULZProto.EffectResult.prototype.setDisableMove = function(value) {
  jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional bool disable_atk = 11;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ULZProto.EffectResult.prototype.getDisableAtk = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 11, false));
};


/** @param {boolean} value */
proto.ULZProto.EffectResult.prototype.setDisableAtk = function(value) {
  jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional bool disable_def = 12;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ULZProto.EffectResult.prototype.getDisableDef = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 12, false));
};


/** @param {boolean} value */
proto.ULZProto.EffectResult.prototype.setDisableDef = function(value) {
  jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional bool disable_draw = 13;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ULZProto.EffectResult.prototype.getDisableDraw = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 13, false));
};


/** @param {boolean} value */
proto.ULZProto.EffectResult.prototype.setDisableDraw = function(value) {
  jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional bool disable_change = 14;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ULZProto.EffectResult.prototype.getDisableChange = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 14, false));
};


/** @param {boolean} value */
proto.ULZProto.EffectResult.prototype.setDisableChange = function(value) {
  jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional string binding_func = 15;
 * @return {string}
 */
proto.ULZProto.EffectResult.prototype.getBindingFunc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.ULZProto.EffectResult.prototype.setBindingFunc = function(value) {
  jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional int32 remain_cd = 16;
 * @return {number}
 */
proto.ULZProto.EffectResult.prototype.getRemainCd = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.ULZProto.EffectResult.prototype.setRemainCd = function(value) {
  jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional string assign_from = 17;
 * @return {string}
 */
proto.ULZProto.EffectResult.prototype.getAssignFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/** @param {string} value */
proto.ULZProto.EffectResult.prototype.setAssignFrom = function(value) {
  jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional int32 skill_id = 18;
 * @return {number}
 */
proto.ULZProto.EffectResult.prototype.getSkillId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {number} value */
proto.ULZProto.EffectResult.prototype.setSkillId = function(value) {
  jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional int32 status_id = 19;
 * @return {number}
 */
proto.ULZProto.EffectResult.prototype.getStatusId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {number} value */
proto.ULZProto.EffectResult.prototype.setStatusId = function(value) {
  jspb.Message.setProto3IntField(this, 19, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ULZProto.EffectTiming = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ULZProto.EffectTiming, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ULZProto.EffectTiming.displayName = 'proto.ULZProto.EffectTiming';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ULZProto.EffectTiming.prototype.toObject = function(opt_includeInstance) {
  return proto.ULZProto.EffectTiming.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ULZProto.EffectTiming} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.EffectTiming.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventPhase: jspb.Message.getFieldWithDefault(msg, 1, 0),
    hookType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    subCount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ULZProto.EffectTiming}
 */
proto.ULZProto.EffectTiming.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ULZProto.EffectTiming;
  return proto.ULZProto.EffectTiming.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ULZProto.EffectTiming} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ULZProto.EffectTiming}
 */
proto.ULZProto.EffectTiming.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ULZProto.EventHookPhase} */ (reader.readEnum());
      msg.setEventPhase(value);
      break;
    case 2:
      var value = /** @type {!proto.ULZProto.EventHookType} */ (reader.readEnum());
      msg.setHookType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSubCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ULZProto.EffectTiming.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ULZProto.EffectTiming.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ULZProto.EffectTiming} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ULZProto.EffectTiming.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventPhase();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getHookType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getSubCount();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional EventHookPhase event_phase = 1;
 * @return {!proto.ULZProto.EventHookPhase}
 */
proto.ULZProto.EffectTiming.prototype.getEventPhase = function() {
  return /** @type {!proto.ULZProto.EventHookPhase} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ULZProto.EventHookPhase} value */
proto.ULZProto.EffectTiming.prototype.setEventPhase = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional EventHookType hook_type = 2;
 * @return {!proto.ULZProto.EventHookType}
 */
proto.ULZProto.EffectTiming.prototype.getHookType = function() {
  return /** @type {!proto.ULZProto.EventHookType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ULZProto.EventHookType} value */
proto.ULZProto.EffectTiming.prototype.setHookType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int32 sub_count = 3;
 * @return {number}
 */
proto.ULZProto.EffectTiming.prototype.getSubCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ULZProto.EffectTiming.prototype.setSubCount = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.ULZProto.PlayerSide = {
  HOST: 0,
  DUELER: 1
};

/**
 * @enum {number}
 */
proto.ULZProto.EventCardType = {
  NULL: 0,
  ATTACK: 1,
  DEFENCE: 2,
  GUN: 3,
  MOVE: 4,
  STAR: 5
};

/**
 * @enum {number}
 */
proto.ULZProto.EventCardPos = {
  BLOCK: 0,
  INSIDE: 1,
  OUTSIDE: 2,
  DESTROY: 3
};

/**
 * @enum {number}
 */
proto.ULZProto.RangeType = {
  SHORT: 0,
  MIDDLE: 1,
  LONG: 2
};

/**
 * @enum {number}
 */
proto.ULZProto.MovePhaseOpt = {
  NO_MOVE: 0,
  FORWARD: 1,
  BACKWARD: 2,
  STAY: 3,
  CHANGE: 4
};

/**
 * @enum {number}
 */
proto.ULZProto.EventCardFunc = {
  NULL: 0,
  OCCUR_CHANCE_EVENT: 1,
  OCCUR_HEAL_EVENT: 2,
  OCCUR_CURE_EVENT: 3,
  OCCUR_QUICK_EVENT: 4,
  OCCUR_CURSE_EVENT: 5,
  OCCUR_CHALICE_EVENT: 6,
  OCCUR_POISON_EVENT: 7,
  OCCUR_DAMAGE_EVENT: 8
};

/**
 * @enum {number}
 */
proto.ULZProto.SignEq = {
  EQUAL: 0,
  GREATER: 1,
  LESSER: 2
};

/**
 * @enum {number}
 */
proto.ULZProto.EffectOption = {
  STATUS_ADDITION: 0,
  INSTANCE_CHANGE: 1,
  STATUS_FIXVALUE: 2,
  HARD_INSTANCE_CHANGE: 3
};

goog.object.extend(exports, proto.ULZProto);
