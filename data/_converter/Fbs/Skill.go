// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Skill struct {
	_tab flatbuffers.Table
}

func GetRootAsSkill(buf []byte, offset flatbuffers.UOffsetT) *Skill {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Skill{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Skill) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Skill) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Skill) Id() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Skill) MutateId(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *Skill) FeatNo() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Skill) MutateFeatNo(n int8) bool {
	return rcv._tab.MutateInt8Slot(6, n)
}

func (rcv *Skill) Pow() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Skill) MutatePow(n int16) bool {
	return rcv._tab.MutateInt16Slot(8, n)
}

func (rcv *Skill) DiceAttr() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Skill) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Skill) TrigFunc(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Skill) TrigFuncLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Skill) TrigFuncBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Skill) MutateTrigFunc(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func SkillStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func SkillAddId(builder *flatbuffers.Builder, id int32) {
	builder.PrependInt32Slot(0, id, 0)
}
func SkillAddFeatNo(builder *flatbuffers.Builder, featNo int8) {
	builder.PrependInt8Slot(1, featNo, 0)
}
func SkillAddPow(builder *flatbuffers.Builder, pow int16) {
	builder.PrependInt16Slot(2, pow, 0)
}
func SkillAddDiceAttr(builder *flatbuffers.Builder, diceAttr flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(diceAttr), 0)
}
func SkillAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(name), 0)
}
func SkillAddTrigFunc(builder *flatbuffers.Builder, trigFunc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(trigFunc), 0)
}
func SkillStartTrigFuncVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func SkillEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
