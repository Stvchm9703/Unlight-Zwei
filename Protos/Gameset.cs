// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: gameset.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ULZAsset.ProtoMod {

  /// <summary>Holder for reflection information generated from gameset.proto</summary>
  public static partial class GamesetReflection {

    #region Descriptor
    /// <summary>File descriptor for gameset.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GamesetReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1nYW1lc2V0LnByb3RvEghVTFpQcm90bxoURXZlbnRIb29rUGhhc2UucHJv",
            "dG8ifgoKQWN0aW9uQ2FyZBIKCgJpZBgBIAEoCRIgCgZVcFR5cGUYAiABKA4y",
            "EC5VTFpQcm90by5BQ1R5cGUSDwoHVXBWYWx1ZRgDIAEoERIgCgZEd1R5cGUY",
            "BCABKA4yEC5VTFpQcm90by5BQ1R5cGUSDwoHRHdWYWx1ZRgFIAEoESK+AQoG",
            "U3RhdHVzEgoKAmlkGAEgASgJEgwKBE5hbWUYAiABKAkSEgoKRGVzcmlwdGlv",
            "bhgDIAEoCRIOCgZXZWlnaHQYBCABKAUSDQoFQ291bnQYBSABKAUSEwoLVHJp",
            "Z2dlckZ1bmMYBiABKAwSKQoHRUhQaGFzZRgHIAEoDjIYLlVMWlByb3RvLkV2",
            "ZW50SG9va1BoYXNlEicKBkVIVHlwZRgIIAEoDjIXLlVMWlByb3RvLkV2ZW50",
            "SG9va1R5cGUilQEKC0NhcmRDaGFySW50EgwKBENjSWQYASABKAkSCgoCSHAY",
            "AiABKBESDQoFSHBJbnQYAyABKBESCwoDQXRrGAQgASgREg4KBkF0a0ludBgF",
            "IAEoERILCgNEZWYYBiABKBESDgoGRGVmSW50GAcgASgREiMKCVN0YXR1c0lu",
            "dBgIIAMoCzIQLlVMWlByb3RvLlN0YXR1cyJeCgZQbGF5ZXISCgoCaWQYASAB",
            "KAkSJAoFQ0NTZXQYAiADKAsyFS5VTFpQcm90by5DYXJkQ2hhckludBIiCgRE",
            "ZWNrGAMgAygLMhQuVUxaUHJvdG8uQWN0aW9uQ2FyZCI6CgNMb2cSEQoJVGlt",
            "ZXN0YW1wGAEgASgDEhAKCExvZ0xldmVsGAIgASgREg4KBkxvZ01zZxgDIAEo",
            "CSL+AQoEUm9vbRIKCgJpZBgBIAEoCRIeCgRIb3N0GAIgASgLMhAuVUxaUHJv",
            "dG8uUGxheWVyEiAKBkR1ZWxlchgDIAEoCzIQLlVMWlByb3RvLlBsYXllchIN",
            "CgVUdXJucxgEIAEoDRIdCgZsb2dnZXIYBSABKAsyDS5VTFpQcm90by5Mb2cS",
            "FAoMRXZlbnRDb3VudGVyGAYgASgREiwKCkV2ZW50UGhhc2UYByABKA4yGC5V",
            "TFpQcm90by5FdmVudEhvb2tQaGFzZRITCgtGaXJzdFBsYXllchgIIAEoCRIR",
            "CglTZWNQbGF5ZXIYCSABKAkSDgoGV2lubmVyGAogASgJIiYKCkRpY2VSZXN1",
            "bHQSCwoDQVRLGAEgASgREgsKA0RFRhgCIAEoESLKAQoHR2FtZVNldBIKCgJp",
            "ZBgBIAEoCRIeCgRTZWxmGAIgASgLMhAuVUxaUHJvdG8uUGxheWVyEiIKCE9w",
            "cG9zaXRlGAMgASgLMhAuVUxaUHJvdG8uUGxheWVyEhQKDEV2ZW50Q291bnRl",
            "chgEIAEoERINCgVUdXJucxgFIAEoERIPCgdBVEtEaWNlGAYgASgREg8KB0RF",
            "RkRpY2UYByABKBESKAoKUm9sbFJlc3VsdBgIIAMoCzIULlVMWlByb3RvLkRp",
            "Y2VSZXN1bHQiNQoKUGxheWVySW5mbxIKCgJJZBgBIAEoCRIMCgROYW1lGAIg",
            "ASgJEg0KBVRpdGxlGAMgASgJKj8KBkFDVHlwZRIHCgNBVEsQABIHCgNERUYQ",
            "ARIHCgNNT1YQAhIHCgNTVFIQAxIHCgNHVU4QBBIICgROVUxMEAVCFKoCEVVM",
            "WkFzc2V0LlByb3RvTW9kYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::ULZAsset.ProtoMod.EventHookPhaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::ULZAsset.ProtoMod.ACType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ULZAsset.ProtoMod.ActionCard), global::ULZAsset.ProtoMod.ActionCard.Parser, new[]{ "Id", "UpType", "UpValue", "DwType", "DwValue" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ULZAsset.ProtoMod.Status), global::ULZAsset.ProtoMod.Status.Parser, new[]{ "Id", "Name", "Desription", "Weight", "Count", "TriggerFunc", "EHPhase", "EHType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ULZAsset.ProtoMod.CardCharInt), global::ULZAsset.ProtoMod.CardCharInt.Parser, new[]{ "CcId", "Hp", "HpInt", "Atk", "AtkInt", "Def", "DefInt", "StatusInt" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ULZAsset.ProtoMod.Player), global::ULZAsset.ProtoMod.Player.Parser, new[]{ "Id", "CCSet", "Deck" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ULZAsset.ProtoMod.Log), global::ULZAsset.ProtoMod.Log.Parser, new[]{ "Timestamp", "LogLevel", "LogMsg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ULZAsset.ProtoMod.Room), global::ULZAsset.ProtoMod.Room.Parser, new[]{ "Id", "Host", "Dueler", "Turns", "Logger", "EventCounter", "EventPhase", "FirstPlayer", "SecPlayer", "Winner" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ULZAsset.ProtoMod.DiceResult), global::ULZAsset.ProtoMod.DiceResult.Parser, new[]{ "ATK", "DEF" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ULZAsset.ProtoMod.GameSet), global::ULZAsset.ProtoMod.GameSet.Parser, new[]{ "Id", "Self", "Opposite", "EventCounter", "Turns", "ATKDice", "DEFDice", "RollResult" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ULZAsset.ProtoMod.PlayerInfo), global::ULZAsset.ProtoMod.PlayerInfo.Parser, new[]{ "Id", "Name", "Title" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ACType {
    [pbr::OriginalName("ATK")] Atk = 0,
    [pbr::OriginalName("DEF")] Def = 1,
    [pbr::OriginalName("MOV")] Mov = 2,
    [pbr::OriginalName("STR")] Str = 3,
    [pbr::OriginalName("GUN")] Gun = 4,
    [pbr::OriginalName("NULL")] Null = 5,
  }

  #endregion

  #region Messages
  public sealed partial class ActionCard : pb::IMessage<ActionCard> {
    private static readonly pb::MessageParser<ActionCard> _parser = new pb::MessageParser<ActionCard>(() => new ActionCard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ULZAsset.ProtoMod.GamesetReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionCard(ActionCard other) : this() {
      id_ = other.id_;
      upType_ = other.upType_;
      upValue_ = other.upValue_;
      dwType_ = other.dwType_;
      dwValue_ = other.dwValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionCard Clone() {
      return new ActionCard(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UpType" field.</summary>
    public const int UpTypeFieldNumber = 2;
    private global::ULZAsset.ProtoMod.ACType upType_ = global::ULZAsset.ProtoMod.ACType.Atk;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.ACType UpType {
      get { return upType_; }
      set {
        upType_ = value;
      }
    }

    /// <summary>Field number for the "UpValue" field.</summary>
    public const int UpValueFieldNumber = 3;
    private int upValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UpValue {
      get { return upValue_; }
      set {
        upValue_ = value;
      }
    }

    /// <summary>Field number for the "DwType" field.</summary>
    public const int DwTypeFieldNumber = 4;
    private global::ULZAsset.ProtoMod.ACType dwType_ = global::ULZAsset.ProtoMod.ACType.Atk;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.ACType DwType {
      get { return dwType_; }
      set {
        dwType_ = value;
      }
    }

    /// <summary>Field number for the "DwValue" field.</summary>
    public const int DwValueFieldNumber = 5;
    private int dwValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DwValue {
      get { return dwValue_; }
      set {
        dwValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActionCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActionCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (UpType != other.UpType) return false;
      if (UpValue != other.UpValue) return false;
      if (DwType != other.DwType) return false;
      if (DwValue != other.DwValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (UpType != global::ULZAsset.ProtoMod.ACType.Atk) hash ^= UpType.GetHashCode();
      if (UpValue != 0) hash ^= UpValue.GetHashCode();
      if (DwType != global::ULZAsset.ProtoMod.ACType.Atk) hash ^= DwType.GetHashCode();
      if (DwValue != 0) hash ^= DwValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (UpType != global::ULZAsset.ProtoMod.ACType.Atk) {
        output.WriteRawTag(16);
        output.WriteEnum((int) UpType);
      }
      if (UpValue != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(UpValue);
      }
      if (DwType != global::ULZAsset.ProtoMod.ACType.Atk) {
        output.WriteRawTag(32);
        output.WriteEnum((int) DwType);
      }
      if (DwValue != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(DwValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (UpType != global::ULZAsset.ProtoMod.ACType.Atk) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) UpType);
      }
      if (UpValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(UpValue);
      }
      if (DwType != global::ULZAsset.ProtoMod.ACType.Atk) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DwType);
      }
      if (DwValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(DwValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActionCard other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.UpType != global::ULZAsset.ProtoMod.ACType.Atk) {
        UpType = other.UpType;
      }
      if (other.UpValue != 0) {
        UpValue = other.UpValue;
      }
      if (other.DwType != global::ULZAsset.ProtoMod.ACType.Atk) {
        DwType = other.DwType;
      }
      if (other.DwValue != 0) {
        DwValue = other.DwValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            UpType = (global::ULZAsset.ProtoMod.ACType) input.ReadEnum();
            break;
          }
          case 24: {
            UpValue = input.ReadSInt32();
            break;
          }
          case 32: {
            DwType = (global::ULZAsset.ProtoMod.ACType) input.ReadEnum();
            break;
          }
          case 40: {
            DwValue = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Status : pb::IMessage<Status> {
    private static readonly pb::MessageParser<Status> _parser = new pb::MessageParser<Status>(() => new Status());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Status> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ULZAsset.ProtoMod.GamesetReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status(Status other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      desription_ = other.desription_;
      weight_ = other.weight_;
      count_ = other.count_;
      triggerFunc_ = other.triggerFunc_;
      eHPhase_ = other.eHPhase_;
      eHType_ = other.eHType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status Clone() {
      return new Status(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Desription" field.</summary>
    public const int DesriptionFieldNumber = 3;
    private string desription_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desription {
      get { return desription_; }
      set {
        desription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Weight" field.</summary>
    public const int WeightFieldNumber = 4;
    private int weight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    /// <summary>Field number for the "Count" field.</summary>
    public const int CountFieldNumber = 5;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "TriggerFunc" field.</summary>
    public const int TriggerFuncFieldNumber = 6;
    private pb::ByteString triggerFunc_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TriggerFunc {
      get { return triggerFunc_; }
      set {
        triggerFunc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EHPhase" field.</summary>
    public const int EHPhaseFieldNumber = 7;
    private global::ULZAsset.ProtoMod.EventHookPhase eHPhase_ = global::ULZAsset.ProtoMod.EventHookPhase.GamesetStart;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.EventHookPhase EHPhase {
      get { return eHPhase_; }
      set {
        eHPhase_ = value;
      }
    }

    /// <summary>Field number for the "EHType" field.</summary>
    public const int EHTypeFieldNumber = 8;
    private global::ULZAsset.ProtoMod.EventHookType eHType_ = global::ULZAsset.ProtoMod.EventHookType.Instant;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.EventHookType EHType {
      get { return eHType_; }
      set {
        eHType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Status);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Status other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Desription != other.Desription) return false;
      if (Weight != other.Weight) return false;
      if (Count != other.Count) return false;
      if (TriggerFunc != other.TriggerFunc) return false;
      if (EHPhase != other.EHPhase) return false;
      if (EHType != other.EHType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Desription.Length != 0) hash ^= Desription.GetHashCode();
      if (Weight != 0) hash ^= Weight.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (TriggerFunc.Length != 0) hash ^= TriggerFunc.GetHashCode();
      if (EHPhase != global::ULZAsset.ProtoMod.EventHookPhase.GamesetStart) hash ^= EHPhase.GetHashCode();
      if (EHType != global::ULZAsset.ProtoMod.EventHookType.Instant) hash ^= EHType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Desription.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Desription);
      }
      if (Weight != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Weight);
      }
      if (Count != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Count);
      }
      if (TriggerFunc.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(TriggerFunc);
      }
      if (EHPhase != global::ULZAsset.ProtoMod.EventHookPhase.GamesetStart) {
        output.WriteRawTag(56);
        output.WriteEnum((int) EHPhase);
      }
      if (EHType != global::ULZAsset.ProtoMod.EventHookType.Instant) {
        output.WriteRawTag(64);
        output.WriteEnum((int) EHType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Desription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desription);
      }
      if (Weight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Weight);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (TriggerFunc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TriggerFunc);
      }
      if (EHPhase != global::ULZAsset.ProtoMod.EventHookPhase.GamesetStart) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EHPhase);
      }
      if (EHType != global::ULZAsset.ProtoMod.EventHookType.Instant) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EHType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Status other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Desription.Length != 0) {
        Desription = other.Desription;
      }
      if (other.Weight != 0) {
        Weight = other.Weight;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.TriggerFunc.Length != 0) {
        TriggerFunc = other.TriggerFunc;
      }
      if (other.EHPhase != global::ULZAsset.ProtoMod.EventHookPhase.GamesetStart) {
        EHPhase = other.EHPhase;
      }
      if (other.EHType != global::ULZAsset.ProtoMod.EventHookType.Instant) {
        EHType = other.EHType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Desription = input.ReadString();
            break;
          }
          case 32: {
            Weight = input.ReadInt32();
            break;
          }
          case 40: {
            Count = input.ReadInt32();
            break;
          }
          case 50: {
            TriggerFunc = input.ReadBytes();
            break;
          }
          case 56: {
            EHPhase = (global::ULZAsset.ProtoMod.EventHookPhase) input.ReadEnum();
            break;
          }
          case 64: {
            EHType = (global::ULZAsset.ProtoMod.EventHookType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CardCharInt : pb::IMessage<CardCharInt> {
    private static readonly pb::MessageParser<CardCharInt> _parser = new pb::MessageParser<CardCharInt>(() => new CardCharInt());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardCharInt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ULZAsset.ProtoMod.GamesetReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardCharInt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardCharInt(CardCharInt other) : this() {
      ccId_ = other.ccId_;
      hp_ = other.hp_;
      hpInt_ = other.hpInt_;
      atk_ = other.atk_;
      atkInt_ = other.atkInt_;
      def_ = other.def_;
      defInt_ = other.defInt_;
      statusInt_ = other.statusInt_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardCharInt Clone() {
      return new CardCharInt(this);
    }

    /// <summary>Field number for the "CcId" field.</summary>
    public const int CcIdFieldNumber = 1;
    private string ccId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CcId {
      get { return ccId_; }
      set {
        ccId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Hp" field.</summary>
    public const int HpFieldNumber = 2;
    private int hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "HpInt" field.</summary>
    public const int HpIntFieldNumber = 3;
    private int hpInt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HpInt {
      get { return hpInt_; }
      set {
        hpInt_ = value;
      }
    }

    /// <summary>Field number for the "Atk" field.</summary>
    public const int AtkFieldNumber = 4;
    private int atk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Atk {
      get { return atk_; }
      set {
        atk_ = value;
      }
    }

    /// <summary>Field number for the "AtkInt" field.</summary>
    public const int AtkIntFieldNumber = 5;
    private int atkInt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AtkInt {
      get { return atkInt_; }
      set {
        atkInt_ = value;
      }
    }

    /// <summary>Field number for the "Def" field.</summary>
    public const int DefFieldNumber = 6;
    private int def_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Def {
      get { return def_; }
      set {
        def_ = value;
      }
    }

    /// <summary>Field number for the "DefInt" field.</summary>
    public const int DefIntFieldNumber = 7;
    private int defInt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefInt {
      get { return defInt_; }
      set {
        defInt_ = value;
      }
    }

    /// <summary>Field number for the "StatusInt" field.</summary>
    public const int StatusIntFieldNumber = 8;
    private static readonly pb::FieldCodec<global::ULZAsset.ProtoMod.Status> _repeated_statusInt_codec
        = pb::FieldCodec.ForMessage(66, global::ULZAsset.ProtoMod.Status.Parser);
    private readonly pbc::RepeatedField<global::ULZAsset.ProtoMod.Status> statusInt_ = new pbc::RepeatedField<global::ULZAsset.ProtoMod.Status>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ULZAsset.ProtoMod.Status> StatusInt {
      get { return statusInt_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardCharInt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardCharInt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CcId != other.CcId) return false;
      if (Hp != other.Hp) return false;
      if (HpInt != other.HpInt) return false;
      if (Atk != other.Atk) return false;
      if (AtkInt != other.AtkInt) return false;
      if (Def != other.Def) return false;
      if (DefInt != other.DefInt) return false;
      if(!statusInt_.Equals(other.statusInt_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CcId.Length != 0) hash ^= CcId.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (HpInt != 0) hash ^= HpInt.GetHashCode();
      if (Atk != 0) hash ^= Atk.GetHashCode();
      if (AtkInt != 0) hash ^= AtkInt.GetHashCode();
      if (Def != 0) hash ^= Def.GetHashCode();
      if (DefInt != 0) hash ^= DefInt.GetHashCode();
      hash ^= statusInt_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CcId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CcId);
      }
      if (Hp != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Hp);
      }
      if (HpInt != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(HpInt);
      }
      if (Atk != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Atk);
      }
      if (AtkInt != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(AtkInt);
      }
      if (Def != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(Def);
      }
      if (DefInt != 0) {
        output.WriteRawTag(56);
        output.WriteSInt32(DefInt);
      }
      statusInt_.WriteTo(output, _repeated_statusInt_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CcId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CcId);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Hp);
      }
      if (HpInt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(HpInt);
      }
      if (Atk != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Atk);
      }
      if (AtkInt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(AtkInt);
      }
      if (Def != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Def);
      }
      if (DefInt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(DefInt);
      }
      size += statusInt_.CalculateSize(_repeated_statusInt_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardCharInt other) {
      if (other == null) {
        return;
      }
      if (other.CcId.Length != 0) {
        CcId = other.CcId;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.HpInt != 0) {
        HpInt = other.HpInt;
      }
      if (other.Atk != 0) {
        Atk = other.Atk;
      }
      if (other.AtkInt != 0) {
        AtkInt = other.AtkInt;
      }
      if (other.Def != 0) {
        Def = other.Def;
      }
      if (other.DefInt != 0) {
        DefInt = other.DefInt;
      }
      statusInt_.Add(other.statusInt_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CcId = input.ReadString();
            break;
          }
          case 16: {
            Hp = input.ReadSInt32();
            break;
          }
          case 24: {
            HpInt = input.ReadSInt32();
            break;
          }
          case 32: {
            Atk = input.ReadSInt32();
            break;
          }
          case 40: {
            AtkInt = input.ReadSInt32();
            break;
          }
          case 48: {
            Def = input.ReadSInt32();
            break;
          }
          case 56: {
            DefInt = input.ReadSInt32();
            break;
          }
          case 66: {
            statusInt_.AddEntriesFrom(input, _repeated_statusInt_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Player : pb::IMessage<Player> {
    private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Player> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ULZAsset.ProtoMod.GamesetReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player(Player other) : this() {
      id_ = other.id_;
      cCSet_ = other.cCSet_.Clone();
      deck_ = other.deck_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player Clone() {
      return new Player(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CCSet" field.</summary>
    public const int CCSetFieldNumber = 2;
    private static readonly pb::FieldCodec<global::ULZAsset.ProtoMod.CardCharInt> _repeated_cCSet_codec
        = pb::FieldCodec.ForMessage(18, global::ULZAsset.ProtoMod.CardCharInt.Parser);
    private readonly pbc::RepeatedField<global::ULZAsset.ProtoMod.CardCharInt> cCSet_ = new pbc::RepeatedField<global::ULZAsset.ProtoMod.CardCharInt>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ULZAsset.ProtoMod.CardCharInt> CCSet {
      get { return cCSet_; }
    }

    /// <summary>Field number for the "Deck" field.</summary>
    public const int DeckFieldNumber = 3;
    private static readonly pb::FieldCodec<global::ULZAsset.ProtoMod.ActionCard> _repeated_deck_codec
        = pb::FieldCodec.ForMessage(26, global::ULZAsset.ProtoMod.ActionCard.Parser);
    private readonly pbc::RepeatedField<global::ULZAsset.ProtoMod.ActionCard> deck_ = new pbc::RepeatedField<global::ULZAsset.ProtoMod.ActionCard>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ULZAsset.ProtoMod.ActionCard> Deck {
      get { return deck_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Player);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Player other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!cCSet_.Equals(other.cCSet_)) return false;
      if(!deck_.Equals(other.deck_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      hash ^= cCSet_.GetHashCode();
      hash ^= deck_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      cCSet_.WriteTo(output, _repeated_cCSet_codec);
      deck_.WriteTo(output, _repeated_deck_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      size += cCSet_.CalculateSize(_repeated_cCSet_codec);
      size += deck_.CalculateSize(_repeated_deck_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Player other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      cCSet_.Add(other.cCSet_);
      deck_.Add(other.deck_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            cCSet_.AddEntriesFrom(input, _repeated_cCSet_codec);
            break;
          }
          case 26: {
            deck_.AddEntriesFrom(input, _repeated_deck_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Log : pb::IMessage<Log> {
    private static readonly pb::MessageParser<Log> _parser = new pb::MessageParser<Log>(() => new Log());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Log> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ULZAsset.ProtoMod.GamesetReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Log() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Log(Log other) : this() {
      timestamp_ = other.timestamp_;
      logLevel_ = other.logLevel_;
      logMsg_ = other.logMsg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Log Clone() {
      return new Log(this);
    }

    /// <summary>Field number for the "Timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "LogLevel" field.</summary>
    public const int LogLevelFieldNumber = 2;
    private int logLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LogLevel {
      get { return logLevel_; }
      set {
        logLevel_ = value;
      }
    }

    /// <summary>Field number for the "LogMsg" field.</summary>
    public const int LogMsgFieldNumber = 3;
    private string logMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LogMsg {
      get { return logMsg_; }
      set {
        logMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Log);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Log other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (LogLevel != other.LogLevel) return false;
      if (LogMsg != other.LogMsg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (LogLevel != 0) hash ^= LogLevel.GetHashCode();
      if (LogMsg.Length != 0) hash ^= LogMsg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Timestamp);
      }
      if (LogLevel != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(LogLevel);
      }
      if (LogMsg.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LogMsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (LogLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LogLevel);
      }
      if (LogMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogMsg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Log other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.LogLevel != 0) {
        LogLevel = other.LogLevel;
      }
      if (other.LogMsg.Length != 0) {
        LogMsg = other.LogMsg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 16: {
            LogLevel = input.ReadSInt32();
            break;
          }
          case 26: {
            LogMsg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Room : pb::IMessage<Room> {
    private static readonly pb::MessageParser<Room> _parser = new pb::MessageParser<Room>(() => new Room());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Room> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ULZAsset.ProtoMod.GamesetReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Room() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Room(Room other) : this() {
      id_ = other.id_;
      host_ = other.host_ != null ? other.host_.Clone() : null;
      dueler_ = other.dueler_ != null ? other.dueler_.Clone() : null;
      turns_ = other.turns_;
      logger_ = other.logger_ != null ? other.logger_.Clone() : null;
      eventCounter_ = other.eventCounter_;
      eventPhase_ = other.eventPhase_;
      firstPlayer_ = other.firstPlayer_;
      secPlayer_ = other.secPlayer_;
      winner_ = other.winner_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Room Clone() {
      return new Room(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Host" field.</summary>
    public const int HostFieldNumber = 2;
    private global::ULZAsset.ProtoMod.Player host_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.Player Host {
      get { return host_; }
      set {
        host_ = value;
      }
    }

    /// <summary>Field number for the "Dueler" field.</summary>
    public const int DuelerFieldNumber = 3;
    private global::ULZAsset.ProtoMod.Player dueler_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.Player Dueler {
      get { return dueler_; }
      set {
        dueler_ = value;
      }
    }

    /// <summary>Field number for the "Turns" field.</summary>
    public const int TurnsFieldNumber = 4;
    private uint turns_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Turns {
      get { return turns_; }
      set {
        turns_ = value;
      }
    }

    /// <summary>Field number for the "logger" field.</summary>
    public const int LoggerFieldNumber = 5;
    private global::ULZAsset.ProtoMod.Log logger_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.Log Logger {
      get { return logger_; }
      set {
        logger_ = value;
      }
    }

    /// <summary>Field number for the "EventCounter" field.</summary>
    public const int EventCounterFieldNumber = 6;
    private int eventCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventCounter {
      get { return eventCounter_; }
      set {
        eventCounter_ = value;
      }
    }

    /// <summary>Field number for the "EventPhase" field.</summary>
    public const int EventPhaseFieldNumber = 7;
    private global::ULZAsset.ProtoMod.EventHookPhase eventPhase_ = global::ULZAsset.ProtoMod.EventHookPhase.GamesetStart;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.EventHookPhase EventPhase {
      get { return eventPhase_; }
      set {
        eventPhase_ = value;
      }
    }

    /// <summary>Field number for the "FirstPlayer" field.</summary>
    public const int FirstPlayerFieldNumber = 8;
    private string firstPlayer_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirstPlayer {
      get { return firstPlayer_; }
      set {
        firstPlayer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SecPlayer" field.</summary>
    public const int SecPlayerFieldNumber = 9;
    private string secPlayer_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SecPlayer {
      get { return secPlayer_; }
      set {
        secPlayer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Winner" field.</summary>
    public const int WinnerFieldNumber = 10;
    private string winner_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Winner {
      get { return winner_; }
      set {
        winner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Room);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Room other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Host, other.Host)) return false;
      if (!object.Equals(Dueler, other.Dueler)) return false;
      if (Turns != other.Turns) return false;
      if (!object.Equals(Logger, other.Logger)) return false;
      if (EventCounter != other.EventCounter) return false;
      if (EventPhase != other.EventPhase) return false;
      if (FirstPlayer != other.FirstPlayer) return false;
      if (SecPlayer != other.SecPlayer) return false;
      if (Winner != other.Winner) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (host_ != null) hash ^= Host.GetHashCode();
      if (dueler_ != null) hash ^= Dueler.GetHashCode();
      if (Turns != 0) hash ^= Turns.GetHashCode();
      if (logger_ != null) hash ^= Logger.GetHashCode();
      if (EventCounter != 0) hash ^= EventCounter.GetHashCode();
      if (EventPhase != global::ULZAsset.ProtoMod.EventHookPhase.GamesetStart) hash ^= EventPhase.GetHashCode();
      if (FirstPlayer.Length != 0) hash ^= FirstPlayer.GetHashCode();
      if (SecPlayer.Length != 0) hash ^= SecPlayer.GetHashCode();
      if (Winner.Length != 0) hash ^= Winner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (host_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Host);
      }
      if (dueler_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Dueler);
      }
      if (Turns != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Turns);
      }
      if (logger_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Logger);
      }
      if (EventCounter != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(EventCounter);
      }
      if (EventPhase != global::ULZAsset.ProtoMod.EventHookPhase.GamesetStart) {
        output.WriteRawTag(56);
        output.WriteEnum((int) EventPhase);
      }
      if (FirstPlayer.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(FirstPlayer);
      }
      if (SecPlayer.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(SecPlayer);
      }
      if (Winner.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Winner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (host_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Host);
      }
      if (dueler_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dueler);
      }
      if (Turns != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Turns);
      }
      if (logger_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Logger);
      }
      if (EventCounter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(EventCounter);
      }
      if (EventPhase != global::ULZAsset.ProtoMod.EventHookPhase.GamesetStart) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventPhase);
      }
      if (FirstPlayer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirstPlayer);
      }
      if (SecPlayer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SecPlayer);
      }
      if (Winner.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Winner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Room other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.host_ != null) {
        if (host_ == null) {
          Host = new global::ULZAsset.ProtoMod.Player();
        }
        Host.MergeFrom(other.Host);
      }
      if (other.dueler_ != null) {
        if (dueler_ == null) {
          Dueler = new global::ULZAsset.ProtoMod.Player();
        }
        Dueler.MergeFrom(other.Dueler);
      }
      if (other.Turns != 0) {
        Turns = other.Turns;
      }
      if (other.logger_ != null) {
        if (logger_ == null) {
          Logger = new global::ULZAsset.ProtoMod.Log();
        }
        Logger.MergeFrom(other.Logger);
      }
      if (other.EventCounter != 0) {
        EventCounter = other.EventCounter;
      }
      if (other.EventPhase != global::ULZAsset.ProtoMod.EventHookPhase.GamesetStart) {
        EventPhase = other.EventPhase;
      }
      if (other.FirstPlayer.Length != 0) {
        FirstPlayer = other.FirstPlayer;
      }
      if (other.SecPlayer.Length != 0) {
        SecPlayer = other.SecPlayer;
      }
      if (other.Winner.Length != 0) {
        Winner = other.Winner;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (host_ == null) {
              Host = new global::ULZAsset.ProtoMod.Player();
            }
            input.ReadMessage(Host);
            break;
          }
          case 26: {
            if (dueler_ == null) {
              Dueler = new global::ULZAsset.ProtoMod.Player();
            }
            input.ReadMessage(Dueler);
            break;
          }
          case 32: {
            Turns = input.ReadUInt32();
            break;
          }
          case 42: {
            if (logger_ == null) {
              Logger = new global::ULZAsset.ProtoMod.Log();
            }
            input.ReadMessage(Logger);
            break;
          }
          case 48: {
            EventCounter = input.ReadSInt32();
            break;
          }
          case 56: {
            EventPhase = (global::ULZAsset.ProtoMod.EventHookPhase) input.ReadEnum();
            break;
          }
          case 66: {
            FirstPlayer = input.ReadString();
            break;
          }
          case 74: {
            SecPlayer = input.ReadString();
            break;
          }
          case 82: {
            Winner = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DiceResult : pb::IMessage<DiceResult> {
    private static readonly pb::MessageParser<DiceResult> _parser = new pb::MessageParser<DiceResult>(() => new DiceResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DiceResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ULZAsset.ProtoMod.GamesetReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiceResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiceResult(DiceResult other) : this() {
      aTK_ = other.aTK_;
      dEF_ = other.dEF_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiceResult Clone() {
      return new DiceResult(this);
    }

    /// <summary>Field number for the "ATK" field.</summary>
    public const int ATKFieldNumber = 1;
    private int aTK_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ATK {
      get { return aTK_; }
      set {
        aTK_ = value;
      }
    }

    /// <summary>Field number for the "DEF" field.</summary>
    public const int DEFFieldNumber = 2;
    private int dEF_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DEF {
      get { return dEF_; }
      set {
        dEF_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DiceResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DiceResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ATK != other.ATK) return false;
      if (DEF != other.DEF) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ATK != 0) hash ^= ATK.GetHashCode();
      if (DEF != 0) hash ^= DEF.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ATK != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(ATK);
      }
      if (DEF != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(DEF);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ATK != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ATK);
      }
      if (DEF != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(DEF);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DiceResult other) {
      if (other == null) {
        return;
      }
      if (other.ATK != 0) {
        ATK = other.ATK;
      }
      if (other.DEF != 0) {
        DEF = other.DEF;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ATK = input.ReadSInt32();
            break;
          }
          case 16: {
            DEF = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameSet : pb::IMessage<GameSet> {
    private static readonly pb::MessageParser<GameSet> _parser = new pb::MessageParser<GameSet>(() => new GameSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ULZAsset.ProtoMod.GamesetReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameSet(GameSet other) : this() {
      id_ = other.id_;
      self_ = other.self_ != null ? other.self_.Clone() : null;
      opposite_ = other.opposite_ != null ? other.opposite_.Clone() : null;
      eventCounter_ = other.eventCounter_;
      turns_ = other.turns_;
      aTKDice_ = other.aTKDice_;
      dEFDice_ = other.dEFDice_;
      rollResult_ = other.rollResult_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameSet Clone() {
      return new GameSet(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Self" field.</summary>
    public const int SelfFieldNumber = 2;
    private global::ULZAsset.ProtoMod.Player self_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.Player Self {
      get { return self_; }
      set {
        self_ = value;
      }
    }

    /// <summary>Field number for the "Opposite" field.</summary>
    public const int OppositeFieldNumber = 3;
    private global::ULZAsset.ProtoMod.Player opposite_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ULZAsset.ProtoMod.Player Opposite {
      get { return opposite_; }
      set {
        opposite_ = value;
      }
    }

    /// <summary>Field number for the "EventCounter" field.</summary>
    public const int EventCounterFieldNumber = 4;
    private int eventCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventCounter {
      get { return eventCounter_; }
      set {
        eventCounter_ = value;
      }
    }

    /// <summary>Field number for the "Turns" field.</summary>
    public const int TurnsFieldNumber = 5;
    private int turns_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Turns {
      get { return turns_; }
      set {
        turns_ = value;
      }
    }

    /// <summary>Field number for the "ATKDice" field.</summary>
    public const int ATKDiceFieldNumber = 6;
    private int aTKDice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ATKDice {
      get { return aTKDice_; }
      set {
        aTKDice_ = value;
      }
    }

    /// <summary>Field number for the "DEFDice" field.</summary>
    public const int DEFDiceFieldNumber = 7;
    private int dEFDice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DEFDice {
      get { return dEFDice_; }
      set {
        dEFDice_ = value;
      }
    }

    /// <summary>Field number for the "RollResult" field.</summary>
    public const int RollResultFieldNumber = 8;
    private static readonly pb::FieldCodec<global::ULZAsset.ProtoMod.DiceResult> _repeated_rollResult_codec
        = pb::FieldCodec.ForMessage(66, global::ULZAsset.ProtoMod.DiceResult.Parser);
    private readonly pbc::RepeatedField<global::ULZAsset.ProtoMod.DiceResult> rollResult_ = new pbc::RepeatedField<global::ULZAsset.ProtoMod.DiceResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ULZAsset.ProtoMod.DiceResult> RollResult {
      get { return rollResult_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Self, other.Self)) return false;
      if (!object.Equals(Opposite, other.Opposite)) return false;
      if (EventCounter != other.EventCounter) return false;
      if (Turns != other.Turns) return false;
      if (ATKDice != other.ATKDice) return false;
      if (DEFDice != other.DEFDice) return false;
      if(!rollResult_.Equals(other.rollResult_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (self_ != null) hash ^= Self.GetHashCode();
      if (opposite_ != null) hash ^= Opposite.GetHashCode();
      if (EventCounter != 0) hash ^= EventCounter.GetHashCode();
      if (Turns != 0) hash ^= Turns.GetHashCode();
      if (ATKDice != 0) hash ^= ATKDice.GetHashCode();
      if (DEFDice != 0) hash ^= DEFDice.GetHashCode();
      hash ^= rollResult_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (self_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Self);
      }
      if (opposite_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Opposite);
      }
      if (EventCounter != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(EventCounter);
      }
      if (Turns != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(Turns);
      }
      if (ATKDice != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(ATKDice);
      }
      if (DEFDice != 0) {
        output.WriteRawTag(56);
        output.WriteSInt32(DEFDice);
      }
      rollResult_.WriteTo(output, _repeated_rollResult_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (self_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Self);
      }
      if (opposite_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Opposite);
      }
      if (EventCounter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(EventCounter);
      }
      if (Turns != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Turns);
      }
      if (ATKDice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ATKDice);
      }
      if (DEFDice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(DEFDice);
      }
      size += rollResult_.CalculateSize(_repeated_rollResult_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameSet other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.self_ != null) {
        if (self_ == null) {
          Self = new global::ULZAsset.ProtoMod.Player();
        }
        Self.MergeFrom(other.Self);
      }
      if (other.opposite_ != null) {
        if (opposite_ == null) {
          Opposite = new global::ULZAsset.ProtoMod.Player();
        }
        Opposite.MergeFrom(other.Opposite);
      }
      if (other.EventCounter != 0) {
        EventCounter = other.EventCounter;
      }
      if (other.Turns != 0) {
        Turns = other.Turns;
      }
      if (other.ATKDice != 0) {
        ATKDice = other.ATKDice;
      }
      if (other.DEFDice != 0) {
        DEFDice = other.DEFDice;
      }
      rollResult_.Add(other.rollResult_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (self_ == null) {
              Self = new global::ULZAsset.ProtoMod.Player();
            }
            input.ReadMessage(Self);
            break;
          }
          case 26: {
            if (opposite_ == null) {
              Opposite = new global::ULZAsset.ProtoMod.Player();
            }
            input.ReadMessage(Opposite);
            break;
          }
          case 32: {
            EventCounter = input.ReadSInt32();
            break;
          }
          case 40: {
            Turns = input.ReadSInt32();
            break;
          }
          case 48: {
            ATKDice = input.ReadSInt32();
            break;
          }
          case 56: {
            DEFDice = input.ReadSInt32();
            break;
          }
          case 66: {
            rollResult_.AddEntriesFrom(input, _repeated_rollResult_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo> {
    private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ULZAsset.ProtoMod.GamesetReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo(PlayerInfo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      title_ = other.title_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo Clone() {
      return new PlayerInfo(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Title" field.</summary>
    public const int TitleFieldNumber = 3;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Title != other.Title) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Title);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Title = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
